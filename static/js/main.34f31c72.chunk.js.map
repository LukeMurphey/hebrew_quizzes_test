{"version":3,"sources":["components/About/index.js","components/URLs/index.js","files/bookCover.jpg","components/Home/index.js","components/QuizQuestion/constants.js","components/QuizQuestion/index.js","components/QuizContainer/index.js","components/Hebrew/index.js","components/Verb/ParsingAnswer.js","components/Verb/VerbParsingQuestion.js","components/QuizCompleteDialog/index.js","quizzes/ParsingQuiz/index.js","components/Utils/index.js","components/MatchingQuestion/index.js","quizzes/MatchingQuiz/index.js","components/MakeSentenceQuestion/index.js","quizzes/MakeSentenceQuiz/index.js","components/QuizRegistry/index.js","components/QuizList/index.js","components/NavContainer/index.js","history.js","App.js","reportWebVitals.js","components/ErrorBoundary/index.js","index.js"],"names":["About","inverted","Container","text","style","marginTop","Header","as","href","defaultProps","URL_QUIZZES","Home","history","src","bookCover","width","marginRight","marginBottom","float","alt","Button","primary","onClick","push","withRouter","UNANSWERED","CORRECT","INCORRECT","QuizQuestion","title","children","onSubmit","answerStatus","correctAnswer","Segment","Message","positive","negative","color","QuizContainer","subtitle","percent","onClose","Icon","name","Progress","success","PERSON_FIRST","PERSON_SECOND","PERSON_THIRD","PersonMap","getPersonText","value","GenderMap","NumberMap","getNumberText","genderOptions","key","ParsingAnswer","onChange","person","gender","number","disabled","allowMultiplePerson","Dropdown","multiple","selection","options","e","d","Menu","Item","active","VerbParsingQuestion","onAnswered","question","answer","useState","userAnswer","setUserAnswer","setAnswerStatus","setPerson","setGender","setNumber","p","g","n","Array","isArray","answersArray","sort","map","entry","join","COLORS","RADIAN","Math","PI","renderCustomizedLabel","cx","cy","midAngle","innerRadius","outerRadius","index","radius","x","cos","y","sin","fill","textAnchor","dominantBaseline","QuizCompleteDialog","quizName","correctAnswers","incorrectAnswers","data","PieChart","height","Pie","labelLine","dataKey","label","Cell","length","ParsingQuiz","questionSet","questionNumber","setQuestionNumber","setIncorrectAnswers","correct","shuffle","array","randomIndex","currentIndex","floor","random","vocabularyQuizTitle","chapter","MatchingQuestion","selectedQuestion","setSelectedQuestion","selectedAnswer","setSelectedAnswer","completedQuestions","setCompletedQuestions","completedAnswers","setCompletedAnswers","shuffledQuestions","setShuffledQuestions","shuffledAnswers","setShuffledAnswers","isQuestionAnswered","i","includes","isAnswered","useEffect","reduce","a","definition","getIndexOfAnswers","concat","placeholder","Grid","columns","stackable","textAlign","Divider","vertical","Row","verticalAlign","Column","vocabEntry","fluid","word","maxPerPage","MatchingQuiz","pageNumber","setPageNumber","pageCount","ceil","currentPage","setCurrentPage","startOffset","endOffset","slice","MakeSentenceQuestion","sentence","chosenIndexes","setChosenIndexes","answerWordList","setAnswerWordList","answerWordLabelList","isChosen","Label","answerWordsShuffled","split","constructedAnswer","wordForIndex","filter","reverse","answerWords","isWrong","MakeSentenceQuiz","QuizRegistry","path","render","genesis_1_shema","chapter_2_letters","chapter_4","chapter_4_nouns","chapter_4_conjunction","chapter_5","chapter_7","chapter_8","chapter_8_pronominal","chapter_9","chapter_11","qal_perfect_qatal","chapter_13","qal_imperfect_qatal","chapter_14","chapter_15","chapter_16","chapter_17","chapter_18","chapter_19","chapter_19_forms","chapter_20","chapter_22","QUIZTYPE_ALL","QUIZTYPE_VOCAB","QUIZTYPE_PARADIGM","isVocab","quiz","QuizList","search","setSearch","quizType","setQuizType","filteredQuizzes","quizzes","match","searchLower","toLowerCase","Object","entries","indexOf","searchQuizzes","filterQuizzes","quizRows","Table","to","dividing","Group","Link","Input","icon","basic","celled","collapsing","HeaderCell","Body","warning","header","content","TabMenuItem","activeOnlyWhenExact","useRouteMatch","exact","NavContainer","padding","pointing","createBrowserHistory","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ErrorBoundary","props","state","error","errorInfo","this","setState","whiteSpace","toString","componentStack","React","Component","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.34f31c72.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Header, Container } from \"semantic-ui-react\";\n\nfunction About({ inverted }) {\n  return (\n    <Container text style={{ marginTop: 32 }}>\n      <p>\n        <Header as='h1'>About</Header>\n        This website was made by Luke Murphey. This is an open-source project and you can get the source-code\n        on <a href=\"https://github.com/LukeMurphey/hebrew_quizzes\">Github</a>. You may be interested in some\n        of my other projects, including <a href=\"https://textcritical.net\">TextCritical.net</a>, a\n        website dedicated to the study of ancient Greek.\n      </p>\n    </Container>\n  );\n}\n\nAbout.propTypes = {\n  inverted: PropTypes.bool,\n};\n\nAbout.defaultProps = {\n  inverted: false,\n};\n\nexport default About;\n","export const URL_HOME = '/';\nexport const URL_QUIZZES = '/quizzes';\nexport const URL_ABOUT = '/about';\n\n// Quizzes\nexport const URL_LETTERS = '/letters';\nexport const URL_BASIC_READINGS = '/basic_readings';\nexport const URL_PRONOMINAL = '/pronominal';\nexport const URL_QAL_PERFECT = '/qalperfect';\nexport const URL_QAL_IMPERFECT = '/qalimperfect';\nexport const URL_NOUN_PARSING = '/noun_parsing';\nexport const URL_CONJUNCTION = '/conjunction';\nexport const URL_FORMS_19 = '/forms_19';\n\n// Vocab\nexport const URL_VOCAB_4 = '/vocab_4';\nexport const URL_VOCAB_5 = '/vocab_5';\nexport const URL_VOCAB_7 = '/vocab_7';\nexport const URL_VOCAB_8 = '/vocab_8';\nexport const URL_VOCAB_9 = '/vocab_9';\nexport const URL_VOCAB_11 = '/vocab_11';\nexport const URL_VOCAB_13 = '/vocab_13';\nexport const URL_VOCAB_14 = '/vocab_14';\nexport const URL_VOCAB_15 = '/vocab_15';\nexport const URL_VOCAB_16 = '/vocab_16';\nexport const URL_VOCAB_17 = '/vocab_17';\nexport const URL_VOCAB_18 = '/vocab_18';\nexport const URL_VOCAB_19 = '/vocab_19';\nexport const URL_VOCAB_20 = '/vocab_20';\nexport const URL_VOCAB_22 = '/vocab_22';\n\nexport function urlVocab(chapter){\n    return `/vocab_${chapter}`;\n}\n","export default __webpack_public_path__ + \"static/media/bookCover.f334d199.jpg\";","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Header, Container, Button } from \"semantic-ui-react\";\nimport { withRouter } from \"react-router-dom\";\nimport { URL_QUIZZES } from \"../URLs/index\";\nimport bookCover from'../../files/bookCover.jpg';\n\nfunction Home({ inverted, history }) {\n  return (\n    <Container text style={{ marginTop: 32 }}>\n      <p>\n        <Header as='h1'>Hebrew Quizzes for Learning Biblical Hebrew</Header>\n        <img src={bookCover} style={{width: \"25%\", marginRight: 16, marginBottom: 16, float: \"left\"}} alt=\"bookCover\" />\n        This web-app provides a series of interactive quizzes to help students attempting to learn\n        ancient Hebrew using Kutz and Josberger's book \"Learning Biblical Hebrew.\" You can purchase\n        the book on <a href=\"https://www.amazon.com/Learning-Biblical-Hebrew-Comprehension-Introductory/dp/1683590848\">Amazon.com</a> or <a href=\"https://lexhampress.com/product/147180/learning-biblical-hebrew-reading-for-comprehension-an-introductory-grammar\">Lexham press</a>.\n      </p>\n      <p>\n        <Button primary onClick={() => history.push(URL_QUIZZES)}>Go to the quizzes</Button>\n      </p>\n    </Container>\n  );\n}\n\nHome.propTypes = {\n  inverted: PropTypes.bool,\n  history: PropTypes.object.isRequired,\n};\n\nHome.defaultProps = {\n  inverted: false,\n};\n\nexport default withRouter(Home);\n","export const UNANSWERED = 'unanswered';\nexport const CORRECT = 'correct';\nexport const INCORRECT = 'incorrect';\n","/**\n * This component provides a single quiz question.\n * \n * There are several props you will want to use:\n *   onSubmit: providing this will cause the question to show a \"submit\" button. The callback will be called when the\n *             user pressed the button.\n *   answerStatus: indicates if the answer was correct, incorrect, or unanswered. This causes the dialog to show a\n *                 little green or red banner telling they got it right/wrong.\n *   correctAnswer: the string that should be shown when the user gets the answer wrong\n */\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Header, Segment, Button, Message } from \"semantic-ui-react\";\nimport { UNANSWERED, CORRECT, INCORRECT } from \"../QuizQuestion/constants\";\n\nfunction QuizQuestion({\n  title,\n  inverted,\n  children,\n  onSubmit,\n  answerStatus,\n  correctAnswer,\n}) {\n  return (\n    <Segment inverted={inverted}>\n      <Header as=\"h2\">{title}</Header>\n      <div>{children}</div>\n      <div style={{ marginTop: 16 }}>\n        {answerStatus === UNANSWERED && onSubmit !== null && (\n          <Button onClick={() => onSubmit()}>Submit</Button>\n        )}\n        {answerStatus === CORRECT && onSubmit !== null && (\n          <>\n            <Message positive>\n              <Message.Header>Yay</Message.Header>\n              <p>The answer is correct.</p>\n            </Message>\n\n            <Button positive onClick={() => onSubmit()}>\n              Next\n            </Button>\n          </>\n        )}\n        {answerStatus === INCORRECT && onSubmit !== null && (\n          <>\n            <Message negative>\n              <Message.Header>Oops</Message.Header>\n              <p>\n                The answer is not correct.\n                {correctAnswer !== null &&\n                  ` The correct answer is \"${correctAnswer}\"`}\n              </p>\n            </Message>\n            <Button color=\"red\" onClick={() => onSubmit()}>\n              Try Again\n            </Button>\n          </>\n        )}\n      </div>\n    </Segment>\n  );\n}\n\nQuizQuestion.propTypes = {\n  title: PropTypes.string.isRequired,\n  inverted: PropTypes.bool,\n  answerStatus: PropTypes.oneOf([UNANSWERED, CORRECT, INCORRECT]),\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n  onSubmit: PropTypes.func,\n  correctAnswer: PropTypes.string,\n};\n\nQuizQuestion.defaultProps = {\n  inverted: false,\n  answerStatus: null,\n  correctAnswer: null,\n  onSubmit: null,\n};\n\nexport default QuizQuestion;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Header, Container, Progress, Icon } from \"semantic-ui-react\";\nimport { withRouter } from \"react-router-dom\";\n\nfunction QuizContainer({\n  title,\n  subtitle,\n  inverted,\n  percent,\n  onClose,\n  children\n}) {\n  return (\n    <Container style={{ marginTop: 32 }}>\n      <p>\n        <Icon name=\"close\" onClick={() => onClose()} />\n        {percent !== null && (\n          <Progress percent={percent} success />\n        )}\n        <Header as=\"h2\">{title}</Header>\n        <Header as=\"h3\" color=\"grey\">\n          {subtitle}\n        </Header>\n        {children}\n      </p>\n    </Container>\n  );\n}\n\nQuizContainer.propTypes = {\n  title: PropTypes.string,\n  subtitle: PropTypes.string,\n  inverted: PropTypes.bool,\n  percent: PropTypes.number,\n  onClose: PropTypes.func,\n};\n\nQuizContainer.defaultProps = {\n  inverted: false,\n  percent: null,\n};\n\nexport default withRouter(QuizContainer);\n","\n/**\n * Person\n */\nexport const PERSON_FIRST = '1';\nexport const PERSON_SECOND = '2';\nexport const PERSON_THIRD = '3';\n\nexport const PersonMap = {\n    '1': 'First',\n    '2': 'Second',\n    '3': 'Third',\n}\n\nexport function getPersonText(value) {\n    if (!value) {\n        return \"Person\";\n    }\n    return `${PersonMap[value]} Person`;\n};\n\n/**\n * Gender\n */\nexport const GENDER_MASC = 'm';\nexport const GENDER_FEM = 'f';\nexport const GENDER_COM = 'c';\nexport const GENDER_NEUT = 'n';\n\nexport const GenderMap = {\n    'm': 'Masculine',\n    'f': 'Feminine',\n    'c': 'Common',\n    'n': 'Neuter',\n}\n\nexport function getGenderText(value) {\n    if (!value) {\n        return \"Gender\";\n    }\n    return GenderMap[value];\n};\n\n/**\n * Number\n */\nexport const NUMBER_SINGULAR = 's';\nexport const NUMBER_DUAL = 'd';\nexport const NUMBER_PLURAL = 'p';\n\nexport const NumberMap = {\n    's': 'Singular',\n    'd': 'Dual',\n    'p': 'Plural',\n}\n\nexport function getNumberText(value) {\n    if (!value) {\n        return \"Number\";\n    }\n    return NumberMap[value];\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Dropdown } from \"semantic-ui-react\";\nimport {\n  PERSON_FIRST,\n  PERSON_SECOND,\n  PERSON_THIRD,\n  getPersonText,\n  GENDER_MASC,\n  GENDER_FEM,\n  GENDER_COM,\n  GENDER_NEUT,\n  getGenderText,\n  NUMBER_SINGULAR,\n  NUMBER_DUAL,\n  NUMBER_PLURAL,\n  getNumberText,\n} from \"../Hebrew/index\";\n\nconst genderOptions = [\n  { key: PERSON_FIRST, text: getPersonText(PERSON_FIRST), value: PERSON_FIRST },\n  {\n    key: PERSON_SECOND,\n    text: getPersonText(PERSON_SECOND),\n    value: PERSON_SECOND,\n  },\n  { key: PERSON_THIRD, text: getPersonText(PERSON_THIRD), value: PERSON_THIRD },\n];\n\nfunction ParsingAnswer({\n  inverted,\n  onChange,\n  person,\n  gender,\n  number,\n  disabled,\n  allowMultiplePerson,\n}) {\n  return (\n    <>\n      {allowMultiplePerson === true && (\n        <Dropdown\n          disabled={disabled}\n          multiple\n          selection\n          options={genderOptions}\n          style={{ marginRight: 16 }}\n          onChange={(e, d) => {\n            onChange(d.value, gender, number);\n          }}\n          value={person}\n        />\n      )}\n      {allowMultiplePerson === false && (\n        <Dropdown\n          disabled={disabled}\n          multiple\n          selection\n          text={getPersonText(person)}\n          style={{ marginRight: 16 }}\n        >\n          <Dropdown.Menu>\n            <Dropdown.Item\n              active={person === PERSON_FIRST}\n              text=\"First\"\n              onClick={() => {\n                onChange(PERSON_FIRST, gender, number);\n              }}\n            />\n            <Dropdown.Item\n              active={person === PERSON_SECOND}\n              text=\"Second\"\n              onClick={() => {\n                onChange(PERSON_SECOND, gender, number);\n              }}\n            />\n            <Dropdown.Item\n              active={person === PERSON_THIRD}\n              text=\"Third\"\n              onClick={() => {\n                onChange(PERSON_THIRD, gender, number);\n              }}\n            />\n          </Dropdown.Menu>\n        </Dropdown>\n      )}\n      <Dropdown\n        disabled={disabled}\n        selection\n        text={getGenderText(gender)}\n        style={{ marginRight: 16 }}\n      >\n        <Dropdown.Menu>\n          <Dropdown.Item\n            active={gender === GENDER_MASC}\n            text=\"Masculine\"\n            onClick={() => {\n              onChange(person, GENDER_MASC, number);\n            }}\n          />\n          <Dropdown.Item\n            active={gender === GENDER_FEM}\n            text=\"Feminine\"\n            onClick={() => {\n              onChange(person, GENDER_FEM, number);\n            }}\n          />\n          <Dropdown.Item\n            active={gender === GENDER_COM}\n            text=\"Common\"\n            onClick={() => {\n              onChange(person, GENDER_COM, number);\n            }}\n          />\n          <Dropdown.Item\n            active={gender === GENDER_NEUT}\n            text=\"Neuter\"\n            onClick={() => {\n              onChange(person, GENDER_NEUT, number);\n            }}\n          />\n        </Dropdown.Menu>\n      </Dropdown>\n      <Dropdown disabled={disabled} selection text={getNumberText(number)}>\n        <Dropdown.Menu>\n          <Dropdown.Item\n            active={number === NUMBER_SINGULAR}\n            text=\"Singular\"\n            onClick={() => {\n              onChange(person, gender, NUMBER_SINGULAR);\n            }}\n          />\n          <Dropdown.Item\n            active={number === NUMBER_DUAL}\n            text=\"Dual\"\n            onClick={() => {\n              onChange(person, gender, NUMBER_DUAL);\n            }}\n          />\n          <Dropdown.Item\n            active={number === NUMBER_PLURAL}\n            text=\"Plural\"\n            onClick={() => {\n              onChange(person, gender, NUMBER_PLURAL);\n            }}\n          />\n        </Dropdown.Menu>\n      </Dropdown>\n    </>\n  );\n}\n\nParsingAnswer.propTypes = {\n  inverted: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onChange: PropTypes.func.isRequired,\n  allowMultiplePerson: PropTypes.bool,\n  person: PropTypes.oneOf([PERSON_FIRST, PERSON_SECOND, PERSON_THIRD, null]),\n  gender: PropTypes.oneOf([\n    GENDER_MASC,\n    GENDER_FEM,\n    GENDER_COM,\n    GENDER_NEUT,\n    null,\n  ]),\n  number: PropTypes.oneOf([NUMBER_SINGULAR, NUMBER_PLURAL, NUMBER_DUAL, null]),\n};\n\nParsingAnswer.defaultProps = {\n  inverted: false,\n  disabled: false,\n  person: null,\n  gender: null,\n  number: null,\n  allowMultiplePerson: false,\n};\n\nexport default ParsingAnswer;\n","/**\n * This offers a verb parsing question. This users several other components:\n *    QuizQuestion: offers the question alone with the submit buttons\n *    VerbParsingAnswer: offers the dropdowns for selecting the verb parsing\n */\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withRouter } from \"react-router-dom\";\nimport QuizQuestion from \"../QuizQuestion\";\nimport { UNANSWERED, CORRECT, INCORRECT } from \"../QuizQuestion/constants\";\nimport QuizContainer from \"../QuizContainer\";\nimport ParsingAnswer from \"../Verb/ParsingAnswer\";\n\n// https://github.com/LukeMurphey/learning_biblical_hebrew_flashcards/blob/master/qal_perfect_qatal.csv\nfunction VerbParsingQuestion({\n  title,\n  subtitle,\n  inverted,\n  percent,\n  onClose,\n  onAnswered,\n  question,\n  answer,\n  allowMultiplePerson,\n}) {\n  const [userAnswer, setUserAnswer] = useState(null);\n  const [answerStatus, setAnswerStatus] = useState(UNANSWERED);\n\n  const [person, setPerson] = useState(null);\n  const [gender, setGender] = useState(null);\n  const [number, setNumber] = useState(null);\n\n  return (\n    <QuizContainer\n      title={title}\n      subtitle={subtitle}\n      percent={percent}\n      onClose={onClose}\n  >\n      <QuizQuestion\n        title={question}\n        onSubmit={() => {\n          if(answerStatus === CORRECT || answerStatus === INCORRECT) {\n            // We have confirmed the answer status and now need to move to the next question\n            setAnswerStatus(UNANSWERED);\n\n            // Reset the answer\n            setPerson(null);\n            setGender(null);\n            setNumber(null);\n          }\n\n          // If the answer status is correct, then the user has acknowledged the correct answer and wants to move on\n          if(answerStatus === CORRECT ) {\n            // Tell the caller that the question was answered and we should move to the next question\n            onAnswered(true);\n          }\n\n          // If the answer status is incorrect, then the user has acknowledged the correct answer and wants to move on\n          if(answerStatus === INCORRECT ) {\n            // Tell the caller that the question was answered and we should move to the next question\n            onAnswered(false);\n          }\n\n          // Stop if the user hasn't filled out enough of the answer\n          // Otherwise, set the answer status\n          else if (answerStatus === UNANSWERED && person !== null && gender !== null && number !== null) {\n            // TODO evaluate multi answers\n            /*\n            let answer = \n            if(Array.isArray(person) {\n\n            }\n            */\n            setAnswerStatus(userAnswer === answer ? CORRECT : INCORRECT);\n          }\n        }}\n        answerStatus={answerStatus}\n        correctAnswer={answer}\n      >\n        <ParsingAnswer\n          inverted={inverted}\n          question={question}\n          onChange={(p, g, n) => {\n            setPerson(p);\n            setGender(g);\n            setNumber(n);\n\n            if (p && g && n) {\n              // If the person is multiple, then format accordingly\n              if(Array.isArray(p)){\n                // Sort the answer such that the number is first\n                let personSorted = p.sort();\n\n                // Form the answers\n                let answersArray = personSorted.map((entry) => `${entry}${g}${n}`);\n\n                // Make the list into a string\n                setUserAnswer(answersArray.join('/'));\n              }\n              else{\n                setUserAnswer(`${p}${g}${n}`);\n              }\n            }\n          }}\n          person={person}\n          gender={gender}\n          number={number}\n          disabled={answerStatus !== UNANSWERED}\n          allowMultiplePerson={allowMultiplePerson}\n        />\n      </QuizQuestion>\n    </QuizContainer>\n  );\n}\n\nVerbParsingQuestion.propTypes = {\n  title: PropTypes.string,\n  subtitle: PropTypes.string,\n  question: PropTypes.string,\n  answer: PropTypes.string,\n  inverted: PropTypes.bool,\n  percent: PropTypes.number,\n  onClose: PropTypes.func,\n  onAnswered: PropTypes.func,\n  allowMultiplePerson: PropTypes.bool,\n};\n\nVerbParsingQuestion.defaultProps = {\n  inverted: false,\n  percent: null,\n  allowMultiplePerson: false,\n};\n\nexport default withRouter(VerbParsingQuestion);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Header, Container, Button } from \"semantic-ui-react\";\nimport { withRouter } from \"react-router-dom\";\nimport { PieChart, Pie, Cell } from \"recharts\";\nimport { URL_QUIZZES } from \"../URLs/index\";\n\n// Create the set of colors to use\nconst COLORS = [\"#DD2230\", \"#4AB93A\"];\n\nconst RADIAN = Math.PI / 180;\nconst renderCustomizedLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent, index }) => {\n  const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n  return (\n    <text x={x} y={y} fill=\"white\" textAnchor={x > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n      { index === 0 && percent > 0 && (\n        \"✘\"\n      )}\n      { index !== 0 && percent > 0 && (\n        \"✔\"\n      )}\n    </text>\n  );\n};\nfunction QuizCompleteDialog({\n  quizName,\n  correctAnswers,\n  incorrectAnswers,\n  inverted,\n  history,\n}) {\n\n  // Create the data for the pie-chart\n  const data = [\n    {\n      name: \"Incorrect\",\n      value: incorrectAnswers,\n    },\n    {\n      name: \"Correct\",\n      value: correctAnswers,\n    }\n  ];\n\n  return (\n    <Container style={{ marginTop: 32 }}>\n      <p>\n        <Header as=\"h2\">\n          You have successfully completed the quiz for {quizName}\n        </Header>\n        {correctAnswers !== null && incorrectAnswers !== null && (\n            <PieChart width={200} height={200}>\n              <Pie\n                data={data}\n                cx=\"50%\"\n                cy=\"50%\"\n                labelLine={false}\n                outerRadius={80}\n                fill=\"#8884d8\"\n                dataKey=\"value\"\n                label={renderCustomizedLabel}\n              >\n                {data.map((entry, index) => (\n                  <Cell\n                    key={`cell-${index}`}\n                    fill={COLORS[index % COLORS.length]}\n                  />\n                ))}\n              </Pie>\n            </PieChart>\n        )}\n        <Button onClick={() => history.push(URL_QUIZZES)}>\n          Return to Quiz List\n        </Button>\n      </p>\n    </Container>\n  );\n}\n\nQuizCompleteDialog.propTypes = {\n  quizName: PropTypes.string,\n  inverted: PropTypes.bool,\n  history: PropTypes.object.isRequired,\n  incorrectAnswers: PropTypes.number,\n  correctAnswers: PropTypes.number,\n};\n\nQuizCompleteDialog.defaultProps = {\n  inverted: false,\n  incorrectAnswers: null,\n  correctAnswers: null,\n};\n\nexport default withRouter(QuizCompleteDialog);\n","/**\n * This quiz offers the ability to parse verbs.\n * \n *    1) ParsingQuiz: takes a list of verb parsing questions and present them one-by-one\n *    2) VerbParsingQuestion: presents one parsing question to the user\n *    3) ParsingAnswer: presents the UI for selecting a parse and communicates it back up to the parent\n * \n * The answer is evaluated for correctness in the QuizQuestion::onSubmit in VerbParsingQuestion.\n */\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport VerbParsingQuestion from \"../../components/Verb/VerbParsingQuestion\";\nimport { URL_QUIZZES } from \"../../components/URLs/index\";\nimport { withRouter } from \"react-router-dom\";\nimport QuizCompleteDialog from \"../../components/QuizCompleteDialog/index\";\n\nfunction ParsingQuiz({ subtitle, inverted, history, title, questionSet, allowMultiplePerson }) {\n  const [questionNumber, setQuestionNumber] = useState(0);\n  const [incorrectAnswers, setIncorrectAnswers] = useState(0);\n\n  let question = null;\n\n  // If the question is within the list, then get it\n  // Otherwise, if it after the end then we have completed the quiz\n  if (questionNumber < questionSet.length) {\n    question = questionSet[questionNumber];\n  }\n\n  return (\n    <>\n      {!question && (\n        <QuizCompleteDialog\n          quizName={title}\n          correctAnswers={questionSet.length}\n          incorrectAnswers={incorrectAnswers}\n        />\n      )}\n      {question && (\n        <VerbParsingQuestion\n          title={title}\n          subtitle={subtitle}\n          question={`Parse this verb: ${question[\"question\"]}`}\n          answer={question[\"answer\"]}\n          percent={100 * (questionNumber / questionSet.length)}\n          inverted={inverted}\n          allowMultiplePerson={allowMultiplePerson}\n          onClose={() => history.push(URL_QUIZZES)}\n          onAnswered={(correct) => {\n            if (correct) {\n              setQuestionNumber(1 + questionNumber);\n            }\n            if (!correct) {\n              setIncorrectAnswers(incorrectAnswers + 1);\n            }\n          }}\n        />\n      )}\n    </>\n  );\n}\n\nParsingQuiz.propTypes = {\n  title: PropTypes.string.isRequired,\n  inverted: PropTypes.bool,\n  history: PropTypes.object.isRequired,\n  questionSet: PropTypes.arrayOf(PropTypes.node).isRequired,\n  allowMultiplePerson: PropTypes.bool,\n};\n\nParsingQuiz.defaultProps = {\n  inverted: false,\n  allowMultiplePerson: false,\n};\n\nexport default withRouter(ParsingQuiz);\n","export function shuffle(array) {\n  // https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n  var currentIndex = array.length,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    // And swap it with the current element.\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex],\n      array[currentIndex],\n    ];\n  }\n\n  return array;\n}\n\nexport function vocabularyQuizTitle(chapter) {\n  return `Chapter ${chapter} Vocabulary`;\n}\n","/**\n * This component provides a way to provide a matching quiz of words to definitions.\n */\nimport React, { useState, useEffect } from \"react\";\nimport { Grid, Divider, Segment, Button } from \"semantic-ui-react\";\nimport PropTypes from \"prop-types\";\nimport { UNANSWERED, CORRECT } from \"../QuizQuestion/constants\";\nimport QuizContainer from \"../QuizContainer\";\nimport QuizQuestion from \"../QuizQuestion\";\nimport { shuffle } from \"../Utils/index\";\n\n// TODOs:\n// fix warnings\n\nfunction MatchingQuestion({\n  inverted,\n  title,\n  questionSet,\n  subtitle,\n  percent,\n  onClose,\n  onAnswered,\n}) {\n  const [selectedQuestion, setSelectedQuestion] = useState(null);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n\n  const [answerStatus, setAnswerStatus] = useState(UNANSWERED);\n  const [completedQuestions, setCompletedQuestions] = useState([]);\n  const [completedAnswers, setCompletedAnswers] = useState([]);\n\n  // Shuffle both sets so that we can make sure the left and the right doesn't match\n  const [shuffledQuestions, setShuffledQuestions] = useState([]);\n  const [shuffledAnswers, setShuffledAnswers] = useState([]);\n\n  function isQuestionAnswered(i) {\n    return completedQuestions.includes(i);\n  }\n\n  function isAnswered(i) {\n    return completedAnswers.includes(i);\n  }\n\n  function getIndexOfAnswers(i) {\n    // Get the question for the index\n    const question = shuffledQuestions[i];\n\n    // Get the indexes\n    const answersIndexes = shuffledAnswers.reduce((a, e, i) => {\n      if (e.definition === question.definition)\n          a.push(i);\n      return a;\n    }, []);\n    \n    return answersIndexes;\n  }\n\n  // Handle selection of answers\n  useEffect(() => {\n    // Evaluate the result if both an answer and question have been selected\n    if (selectedQuestion !== null && selectedAnswer !== null) {\n      // Determine what the correct answer is\n      const correctAnswerIndexes = getIndexOfAnswers(selectedQuestion);\n\n      // If correct, then update the UI accordingly\n      if (correctAnswerIndexes.includes(selectedAnswer)) {\n        // Add to the correct list\n        setCompletedQuestions(completedQuestions.concat([selectedQuestion]));\n        setCompletedAnswers(completedAnswers.concat([selectedAnswer]));\n\n        // Unselect the existing entries\n        setSelectedQuestion(null);\n        setSelectedAnswer(null);\n      }\n    }\n  }, [selectedQuestion, selectedAnswer]);\n\n  // Prepare the questions and answers\n  useEffect(() => {\n    \n    if (questionSet !== null) {\n      // Shuffle the questions and the answers so they don't match in an obvious way\n      setShuffledQuestions(shuffle([...questionSet]));\n      setShuffledAnswers(shuffle([...questionSet]));\n\n      setCompletedQuestions([]);\n      setCompletedAnswers([]);\n    }\n  }, [questionSet]);\n\n  // Handle the case where the user is done matching everything\n  useEffect(() => {\n    // If there are no more entries, then signal that we are done\n    if(completedAnswers !== null && questionSet !== null && completedAnswers.length >= questionSet.length){\n      // Send up the note that the question has been answered\n      onAnswered(CORRECT);\n    }\n  }, [completedAnswers]);\n\n  return (\n    <QuizContainer\n      title={title}\n      subtitle={subtitle}\n      percent={percent}\n      onClose={onClose}\n    >\n      <QuizQuestion\n        answerStatus={answerStatus}\n        // correctAnswer={answer}\n      >\n        <Segment placeholder>\n          <Grid columns={2} stackable textAlign=\"center\">\n            <Divider vertical>Click to Match</Divider>\n\n            <Grid.Row verticalAlign=\"middle\">\n              <Grid.Column>\n                {shuffledQuestions.map((vocabEntry, i) => (\n                  <Button\n                    key={i}\n                    style={{ marginTop: 12 }}\n                    disabled={isQuestionAnswered(i)}\n                    primary={selectedQuestion === i}\n                    onClick={() => setSelectedQuestion(i)}\n                    fluid\n                  >\n                    {vocabEntry.word}\n                  </Button>\n                ))}\n              </Grid.Column>\n              <Grid.Column>\n                {shuffledAnswers.map((vocabEntry, i) => (\n                  <Button\n                    key={i}\n                    style={{ marginTop: 12 }}\n                    disabled={isAnswered(i)}\n                    primary={selectedAnswer === i}\n                    onClick={() => setSelectedAnswer(i)}\n                    fluid\n                  >\n                    {vocabEntry.definition}\n                  </Button>\n                ))}\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Segment>\n      </QuizQuestion>\n    </QuizContainer>\n  );\n}\n\nMatchingQuestion.propTypes = {\n  inverted: PropTypes.bool,\n  title: PropTypes.string,\n  subtitle: PropTypes.string,\n  maxPerPage: PropTypes.number,\n  questionSet: PropTypes.arrayOf(PropTypes.node).isRequired,\n  percent: PropTypes.number,\n  onClose: PropTypes.func,\n  onAnswered: PropTypes.func,\n};\n\nMatchingQuestion.defaultProps = {\n  inverted: true,\n  maxPerPage: 5,\n};\n\nexport default MatchingQuestion;\n","/**\n * This component provides a way to provide a matching quiz of words to definitions.\n */\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withRouter } from \"react-router-dom\";\nimport { URL_QUIZZES } from \"../../components/URLs/index\";\nimport QuizCompleteDialog from \"../../components/QuizCompleteDialog/index\";\nimport MatchingQuestion from \"../../components/MatchingQuestion\";\n\nfunction MatchingQuiz({ inverted, title, maxPerPage, questionSet, history }) {\n  const [pageNumber, setPageNumber] = useState(0);\n\n  // Chop up the vocab list\n  const pageCount = Math.ceil((1.0 * questionSet.length) / maxPerPage);\n  const [currentPage, setCurrentPage] = useState(null);\n\n  // Chop up the question set when the page number changes\n  useEffect(() => {\n    const startOffset = pageNumber * maxPerPage;\n    const endOffset = (pageNumber + 1) * maxPerPage;\n\n    setCurrentPage(questionSet.slice(startOffset, endOffset));\n  }, [pageNumber, questionSet, maxPerPage]);\n\n  return (\n    <>\n      {pageNumber < pageCount && (\n        <MatchingQuestion\n          inverted={inverted}\n          title={title}\n          percent={100 * (pageNumber / pageCount)}\n          onClose={() => history.push(URL_QUIZZES)}\n          onAnswered={() => {\n            setPageNumber(pageNumber + 1);\n          }}\n          questionSet={currentPage}\n          maxPerPage={maxPerPage}\n        />\n      )}\n      {pageNumber >= pageCount && <QuizCompleteDialog quizName={title} />}\n    </>\n  );\n}\n\nMatchingQuiz.propTypes = {\n  inverted: PropTypes.bool,\n  title: PropTypes.string,\n  maxPerPage: PropTypes.number,\n  questionSet: PropTypes.arrayOf(PropTypes.node).isRequired,\n  history: PropTypes.object.isRequired,\n};\n\nMatchingQuiz.defaultProps = {\n  inverted: true,\n  title: \"Vocabulary quiz\",\n  maxPerPage: 5,\n};\n\nexport default withRouter(MatchingQuiz);\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Label, Divider } from \"semantic-ui-react\";\nimport QuizContainer from \"../QuizContainer\";\nimport QuizQuestion from \"../QuizQuestion\";\nimport { shuffle } from \"../Utils/index\";\nimport { UNANSWERED, CORRECT, INCORRECT } from \"../QuizQuestion/constants\";\n\nfunction MakeSentenceQuestion({\n  inverted,\n  title,\n  subtitle,\n  percent,\n  onClose,\n  sentence,\n  onAnswered,\n  answer,\n}) {\n  // Track the words that the user has selected\n  const [chosenIndexes, setChosenIndexes] = useState([]);\n  const [correctIndexes, setCorrectIndexes] = useState([]);\n  const [answerWordList, setAnswerWordList] = useState(null);\n\n  const [answerStatus, setAnswerStatus] = useState(UNANSWERED);\n\n  /** \n   * Determine if the word is in the list that the user chose\n   */\n  function isChosen(index) {\n    return chosenIndexes.includes(index);\n  }\n\n  let answerWordLabelList = null;\n\n  /**\n   * Make the list of words to include in the list of options\n   */\n  if(answerWordList) {\n    answerWordLabelList = answerWordList.map((word, index) => {\n      if (!isChosen(index)) {\n        return (\n          <Label\n            onClick={() => {\n              setChosenIndexes(chosenIndexes.concat([index]));\n            }}\n            key={index}\n          >\n            {word}\n          </Label>\n        );\n      }\n\n      return null;\n    });\n  }\n\n  /**\n   * Construct the shuffled words list\n   */\n  useEffect(() => {\n    // Break up the answer into a list\n    const answerWords = answer ? answer.split(\" \") : [];\n\n    const answerWordsShuffled = shuffle(answerWords);\n    setAnswerWordList(answerWordsShuffled);\n  }, [answer]);\n\n  /**\n   * Make the currently selected list\n   */\n  const constructedAnswer = chosenIndexes.map((index) => {\n    // Get the word for the index\n    const wordForIndex = answerWordList[index];\n\n    return (\n      <Label\n        onClick={() =>\n          setChosenIndexes(chosenIndexes.filter((value) => {\n              return value !== index;\n            }))\n        }\n        key={index}\n      >\n        {wordForIndex}\n      </Label>\n    );\n  }).reverse();\n\n  /**\n   * Handle the user pressing \"submit\"\n   */\n  const submitAnswer = () => {\n    // We have confirmed the answer status and now need to move to the next question\n    if(answerStatus === CORRECT || answerStatus === INCORRECT) {\n      // We have confirmed the answer status and now need to move to the next question\n      setChosenIndexes([]);\n      setAnswerStatus(UNANSWERED);\n    }\n\n    // If the answer status is correct, then the user has acknowledged the correct answer and wants to move on\n    if(answerStatus === CORRECT ) {\n      // Tell the caller that the question was answered and we should move to the next question\n      onAnswered(true);\n    }\n\n    // If the answer status is incorrect, then the user has acknowledged the correct answer and wants to move on\n    if(answerStatus === INCORRECT ) {\n      // Tell the caller that the question was answered and we should move to the next question\n      onAnswered(false);\n    }\n\n    // Not answered yet\n    if(answerStatus === UNANSWERED && chosenIndexes.length > 0 ) {\n      // Construct the answer\n      const answerWords = answer ? answer.split(\" \") : [];\n\n      // Determine if the answer is correct\n      let isWrong = false;\n\n      answerWords.map((word, index) => {\n        // Get the word for the index\n        const wordForIndex = answerWords[index];\n\n        // Make sure that we have enough words\n        if(index >= chosenIndexes) {\n          isWrong = true;\n        }\n        else{\n          // Get the word that the user selected\n          const selectedWordForIndex = answerWordList[chosenIndexes[index]];\n\n          // Determine if this word is the same one from the expected list\n          if(wordForIndex !== selectedWordForIndex){\n            isWrong = true;\n          }\n        }\n      });\n\n      // Set the status accordingly\n      if(isWrong){\n        setAnswerStatus(INCORRECT);\n      }\n      else{\n        setAnswerStatus(CORRECT);\n      }\n    }\n  };\n\n  return (\n    <QuizContainer\n      title={title}\n      subtitle={subtitle}\n      percent={percent}\n      onClose={onClose}\n    >\n      <QuizQuestion\n        answerStatus={answerStatus}\n        onSubmit={submitAnswer}\n        correctAnswer={answer}>\n        <p><strong>Construct the following sentence in Hebrew:</strong></p>\n        {sentence}\n        <p><div style={{height: 32}}>{constructedAnswer}</div></p>\n        <Divider />\n        <p><strong>From the following words</strong></p>\n        <p><div style={{height: 32}}>{answerWordLabelList}</div></p>\n      </QuizQuestion>\n    </QuizContainer>\n  );\n}\n\nMakeSentenceQuestion.propTypes = {\n  inverted: PropTypes.bool,\n  title: PropTypes.string,\n  subtitle: PropTypes.string,\n  question: PropTypes.string.isRequired,\n  answer: PropTypes.string.isRequired,\n  onClose: PropTypes.func,\n  onAnswered: PropTypes.func,\n  percent: PropTypes.number,\n};\n\nMakeSentenceQuestion.defaultProps = {\n  inverted: false,\n};\n\nexport default MakeSentenceQuestion;\n","/**\n * This component provides a way to provide a matching quiz of words to definitions.\n *\n * Some caveats:\n *    * This doesn't support quizzes where the same question text is in the answers list more than once.\n */\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withRouter } from \"react-router-dom\";\nimport { URL_QUIZZES } from \"../../components/URLs/index\";\nimport QuizCompleteDialog from \"../../components/QuizCompleteDialog/index\";\nimport MakeSentenceQuestion from \"../../components/MakeSentenceQuestion/index\";\n\nfunction MakeSentenceQuiz({ inverted, title, questionSet, history }) {\n  const [pageNumber, setPageNumber] = useState(0);\n\n  return (\n    <>\n      {pageNumber < questionSet.length && (\n        <MakeSentenceQuestion\n          inverted={inverted}\n          title={`Construct ${questionSet[pageNumber].title}`}\n          sentence={questionSet[pageNumber].sentence}\n          answer={questionSet[pageNumber].answer}\n          onClose={() => history.push(URL_QUIZZES)}\n          onAnswered={(correct) => {\n            if(correct){\n                setPageNumber(pageNumber + 1);\n            }\n          }}\n          percent={100 * (pageNumber / questionSet.length)}\n        />\n      )}\n      {pageNumber >= questionSet.length && (\n        <QuizCompleteDialog quizName={title} />\n      )}\n    </>\n  );\n}\n\nMakeSentenceQuiz.propTypes = {\n  inverted: PropTypes.bool,\n  title: PropTypes.string,\n  questionSet: PropTypes.arrayOf(PropTypes.node).isRequired,\n  history: PropTypes.object.isRequired,\n};\n\nMakeSentenceQuiz.defaultProps = {\n  inverted: true,\n  title: \"Make a sentence\",\n};\n\nexport default withRouter(MakeSentenceQuiz);\n","import {\n  URL_LETTERS,\n  URL_QAL_PERFECT,\n  URL_QAL_IMPERFECT,\n  URL_VOCAB_4,\n  URL_NOUN_PARSING,\n  URL_CONJUNCTION,\n  URL_VOCAB_5,\n  URL_VOCAB_7,\n  URL_VOCAB_8,\n  URL_VOCAB_9,\n  URL_VOCAB_11,\n  URL_VOCAB_13,\n  URL_VOCAB_14,\n  URL_VOCAB_15,\n  URL_VOCAB_16,\n  URL_VOCAB_17,\n  URL_VOCAB_18,\n  URL_VOCAB_19,\n  URL_FORMS_19,\n  URL_VOCAB_20,\n  URL_VOCAB_22,\n  URL_PRONOMINAL,\n  URL_BASIC_READINGS,\n} from \"../URLs/index\";\nimport ParsingQuiz from \"../../quizzes/ParsingQuiz/index\";\nimport MatchingQuiz from \"../../quizzes/MatchingQuiz/index\";\nimport MakeSentenceQuiz from \"../../quizzes/MakeSentenceQuiz/index\";\n\nimport genesis_1_shema from \"../../data//genesis_1_shema.json\";\nimport chapter_2_letters from \"../../data/chapter_2_letters.json\";\nimport chapter_4 from \"../../data/chapter_4.json\";\nimport chapter_4_nouns from \"../../data/chapter_4_nouns.json\";\nimport chapter_4_conjunction from \"../../data/chapter_4_conjunction.json\";\nimport chapter_5 from \"../../data/chapter_5.json\";\nimport chapter_7 from \"../../data/chapter_7.json\";\nimport chapter_8 from \"../../data/chapter_8.json\";\nimport chapter_8_pronominal from \"../../data/chapter_8_pronominal.json\";\nimport chapter_9 from \"../../data/chapter_9.json\";\nimport chapter_11 from \"../../data/chapter_11.json\";\nimport chapter_13 from \"../../data/chapter_13.json\";\nimport chapter_14 from \"../../data/chapter_14.json\";\nimport chapter_15 from \"../../data/chapter_15.json\";\nimport chapter_16 from \"../../data/chapter_16.json\";\nimport chapter_17 from \"../../data/chapter_17.json\";\nimport chapter_18 from \"../../data/chapter_18.json\";\nimport chapter_19 from \"../../data/chapter_19.json\";\nimport chapter_19_forms from \"../../data/chapter_19_forms.json\";\nimport chapter_20 from \"../../data/chapter_20.json\";\nimport chapter_22 from \"../../data/chapter_22.json\";\nimport qal_perfect_qatal from \"../../data/chapter_12_qal_perfect_qatal.json\";\nimport qal_imperfect_qatal from \"../../data/chapter_13_qal_imperfect_qatal.json\";\n\nimport { shuffle, vocabularyQuizTitle } from \"../Utils/index\";\n\nexport default function QuizRegistry({ inverted }) {\n  return [\n    {\n      title: \"Passage Memorization (Gen. 1 and Dt. 6)\",\n      chapter: 1,\n      path: URL_BASIC_READINGS, \n      render: (\n        <MakeSentenceQuiz\n          inverted={inverted}\n          title={\"Test your memorization of Genesis and Deuteronomy 6:4-5\"}\n          questionSet={genesis_1_shema}\n        />\n      ),\n    },\n    {\n      title: \"Letters\",\n      chapter: 2,\n      path: URL_LETTERS,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={\"Letters\"}\n          questionSet={shuffle(chapter_2_letters)}\n          maxPerPage={15}\n        />\n      ),\n    },\n    {\n      title: \"Chapter 4 Vocabulary\",\n      chapter: 4,\n      path: URL_VOCAB_4,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={vocabularyQuizTitle(4)}\n          questionSet={shuffle(chapter_4)}\n        />\n      ),\n    },\n    {\n      title: \"Noun Parsing\",\n      chapter: 4,\n      path: URL_NOUN_PARSING,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={\"Noun Parsing\"}\n          subtitle={\"Match the noun with the correct form\"}\n          questionSet={shuffle(chapter_4_nouns)}\n          maxPerPage={10}\n        />\n      ),\n    },\n    {\n      title: \"Conjunction\",\n      chapter: 4,\n      path: URL_CONJUNCTION,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={\"Conjunction\"}\n          subtitle={\"Match the conjunction with the word\"}\n          questionSet={shuffle(chapter_4_conjunction)}\n          maxPerPage={10}\n        />\n      ),\n    },\n    {\n      title: \"Chapter 5 Vocabulary (including this/that)\",\n      chapter: 5,\n      path: URL_VOCAB_5,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={vocabularyQuizTitle(5)}\n          questionSet={shuffle(chapter_5)}\n        />\n      ),\n    },\n    {\n      title: \"Chapter 7 Vocabulary\",\n      chapter: 7,\n      path: URL_VOCAB_7,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={vocabularyQuizTitle(7)}\n          questionSet={shuffle(chapter_7)}\n        />\n      ),\n    },\n    {\n      title: \"Chapter 8 Vocabulary\",\n      chapter: 8,\n      path: URL_VOCAB_8,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={vocabularyQuizTitle(8)}\n          questionSet={shuffle(chapter_8)}\n        />\n      ),\n    },\n    {\n      title: \"Pronominal\",\n      chapter: 8,\n      path: URL_PRONOMINAL,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={\"Pronominal\"}\n          questionSet={shuffle(chapter_8_pronominal)}\n        />\n      ),\n    },\n    {\n      title: \"Chapter 9 Vocabulary\",\n      chapter: 9,\n      path: URL_VOCAB_9,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={vocabularyQuizTitle(9)}\n          questionSet={shuffle(chapter_9)}\n        />\n      ),\n    },\n    {\n      title: \"Chapter 11 Vocabulary\",\n      chapter: 11,\n      path: URL_VOCAB_11,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={vocabularyQuizTitle(11)}\n          questionSet={shuffle(chapter_11)}\n        />\n      ),\n    },\n    {\n      title: \"Qal Perfects (Qatal)\",\n      chapter: 12,\n      path: URL_QAL_PERFECT,\n      render: <ParsingQuiz inverted={inverted} questionSet={shuffle(qal_perfect_qatal)} title={\"Qal Perfect (Qatal)\"} />,\n    },\n    {\n      title: \"Chapter 13 Vocabulary\",\n      chapter: 13,\n      path: URL_VOCAB_13,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={vocabularyQuizTitle(13)}\n          questionSet={shuffle(chapter_13)}\n        />\n      ),\n    },\n    {\n      title: \"Qal Imperfects (Qatal)\",\n      chapter: 12,\n      path: URL_QAL_IMPERFECT,\n      render: <ParsingQuiz inverted={inverted} questionSet={shuffle(qal_imperfect_qatal)} allowMultiplePerson={true} title={\"Qal Imperfect (Qatal)\"} />,\n    },\n    {\n      title: \"Chapter 14 Vocabulary\",\n      chapter: 14,\n      path: URL_VOCAB_14,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={vocabularyQuizTitle(14)}\n          questionSet={shuffle(chapter_14)}\n        />\n      ),\n    },\n    {\n      title: \"Chapter 15 Vocabulary\",\n      chapter: 15,\n      path: URL_VOCAB_15,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={vocabularyQuizTitle(15)}\n          questionSet={shuffle(chapter_15)}\n        />\n      ),\n    },\n    {\n      title: \"Chapter 16 Vocabulary\",\n      chapter: 16,\n      path: URL_VOCAB_16,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={vocabularyQuizTitle(16)}\n          questionSet={shuffle(chapter_16)}\n        />\n      ),\n    },\n    {\n      title: \"Chapter 17 Vocabulary\",\n      chapter: 17,\n      path: URL_VOCAB_17,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={vocabularyQuizTitle(17)}\n          questionSet={shuffle(chapter_17)}\n        />\n      ),\n    },\n    {\n      title: \"Chapter 18 Vocabulary\",\n      chapter: 18,\n      path: URL_VOCAB_18,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={vocabularyQuizTitle(18)}\n          questionSet={shuffle(chapter_18)}\n        />\n      ),\n    },\n    {\n      title: \"Chapter 19 Vocabulary\",\n      chapter: 19,\n      path: URL_VOCAB_19,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={vocabularyQuizTitle(19)}\n          questionSet={shuffle(chapter_19)}\n        />\n      ),\n    },\n    {\n      title: \"Piel, Pual, and Hithpael\",\n      chapter: 19,\n      path: URL_FORMS_19,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={\"Piel, Pual, and Hithpael\"}\n          questionSet={chapter_19_forms}\n          maxPerPage={4}\n        />\n      ),\n    },\n    {\n      title: \"Chapter 20 Vocabulary\",\n      chapter: 20,\n      path: URL_VOCAB_20,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={vocabularyQuizTitle(20)}\n          questionSet={shuffle(chapter_20)}\n        />\n      ),\n    },\n    {\n      title: \"Chapter 22 Vocabulary\",\n      chapter: 22,\n      path: URL_VOCAB_22,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={vocabularyQuizTitle(22)}\n          questionSet={shuffle(chapter_22)}\n        />\n      ),\n    },\n  ];\n}\n","import React, { useState } from \"react\";\nimport { Table, Header } from 'semantic-ui-react';\nimport { Container, Icon, Button, Input, Message } from 'semantic-ui-react';\nimport { Link } from \"react-router-dom\";\nimport QuizRegistry from \"../QuizRegistry\";\nimport PropTypes from 'prop-types';\n\nconst QUIZTYPE_ALL = null;\nconst QUIZTYPE_VOCAB = \"vocab\";\nconst QUIZTYPE_PARADIGM = \"paradigm\";\n\nexport function isVocab(quiz) {\n  return quiz.title.includes(\"Vocabulary\");\n}\n\nexport function filterQuizzes(quizzes, quizType) {\n  return quizzes.filter((quiz) => {\n    if (!quizType) {\n      return true;\n    } else if (quizType === QUIZTYPE_VOCAB) {\n      return isVocab(quiz);\n    } else if (quizType === QUIZTYPE_PARADIGM) {\n      return !isVocab(quiz);\n    }\n\n    return true;\n  });\n}\n\nexport function searchQuizzes(quizzes, search) {\n  return quizzes.filter((quiz) => {\n    if (!search) {\n      return true;\n    } else {\n      let match = false;\n      let searchLower = search.toLowerCase();\n\n      Object.entries(quiz).map(([, value]) => {\n        if (value.indexOf) {\n          match = match || value.toLowerCase().indexOf(searchLower) >= 0;\n        }\n      });\n      return match;\n    }\n  });\n}\n\nfunction QuizList( { inverted }) {\n  const [search, setSearch] = useState(null);\n  const [quizType, setQuizType] = useState(QUIZTYPE_ALL);\n\n  const filteredQuizzes = QuizRegistry({ inverted })\n    ? searchQuizzes(filterQuizzes(QuizRegistry({ inverted }), quizType), search)\n    : null;\n\n  const quizRows = [];\n  for (const [index, value] of filteredQuizzes.entries()) {\n    quizRows.push(\n      <Table.Row key={index}>\n        <Table.Cell>{value.chapter}</Table.Cell>\n        <Table.Cell><Link to={value.path}>{value.title}</Link></Table.Cell>\n      </Table.Row>\n    );\n  }\n\n  return (\n    <Container text>\n      <Header as=\"h1\" dividing>\n        Quizzes\n      </Header>\n\n      <Button.Group>\n        <Button\n          as={Link}\n          onClick={() => setQuizType(QUIZTYPE_ALL)}\n          active={quizType === QUIZTYPE_ALL}\n        >\n          All\n        </Button>\n        <Button\n          as={Link}\n          onClick={() => setQuizType(QUIZTYPE_VOCAB)}\n          active={quizType === QUIZTYPE_VOCAB}\n        >\n          Vocabulary\n        </Button>\n        <Button\n          as={Link}\n          onClick={() => setQuizType(QUIZTYPE_PARADIGM)}\n          active={quizType === QUIZTYPE_PARADIGM}\n        >\n          Other\n        </Button>\n      </Button.Group>\n\n      <Input\n        style={{ float: \"right\" }}\n        icon\n        placeholder=\"Search...\"\n        onChange={(e, d) => setSearch(d.value)}\n      >\n        <input />\n        <Icon name=\"search\" />\n      </Input>\n\n      {quizRows.length >= 0 && (\n        <Table basic=\"very\" celled collapsing>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>Chapter</Table.HeaderCell>\n                    <Table.HeaderCell>Title</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {quizRows}\n            </Table.Body>\n        </Table>\n      )}\n      {quizRows.length === 0 && (\n        <Message\n          warning\n          header='No Matches'\n          content='No quizzes match your search.'\n          />\n      )}\n    </Container>\n  );\n}\n\nQuizList.propTypes = {\n  inverted: PropTypes.bool,\n};\n\nQuizList.defaultProps = {\n  inverted: true,\n};\n\nexport default QuizList;\n","import {\n  useRouteMatch,\n  Link,\n} from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { Container, Menu } from \"semantic-ui-react\";\n\n/**\n * This class offers a menu entry for a tab that works with the React router to show the tab when clicked.\n */\nfunction TabMenuItem({ label, to, activeOnlyWhenExact }) {\n  let match = useRouteMatch({\n    path: to,\n    exact: activeOnlyWhenExact,\n  });\n\n  return (\n    <Menu.Item name={label} active={match}>\n      <Link to={to}>{label}</Link>\n    </Menu.Item>\n  );\n}\n\nfunction NavContainer({ inverted, children }) {\n  return (\n      <>\n      <Container\n        fluid\n        style={{\n          padding: \"8px\",\n          marginBottom: 16,\n        }}\n      >\n        <Container text>\n          <Menu pointing inverted={inverted}>\n            <TabMenuItem\n              to=\"/\"\n              label=\"Get the Book\"\n              activeOnlyWhenExact={true}\n            />\n            <TabMenuItem to=\"/quizzes\" label=\"Quizzes\" />\n            <TabMenuItem to=\"/about\" label=\"About\" />\n          </Menu>\n        </Container>\n      </Container>\n      {children}\n      </>\n  );\n}\n\nNavContainer.propTypes = {\n  inverted: PropTypes.bool,\n};\n\nNavContainer.defaultProps = {\n  inverted: true,\n};\n\nexport default NavContainer;\n","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();","import \"./App.css\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nimport {\n  HashRouter as Router,\n  Route,\n} from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport About from \"./components/About/index\";\nimport Home from \"./components/Home/index\";\nimport QuizList from \"./components/QuizList/index\";\nimport NavContainer from \"./components/NavContainer/index\";\nimport { URL_QUIZZES, URL_ABOUT, URL_HOME } from \"./components/URLs/index\";\nimport history from \"./history\";\nimport QuizRegistry from \"./components/QuizRegistry\";\n\nfunction App({ inverted }) {\n  return (\n    <Router history={history}>\n      <Route exact path={URL_QUIZZES}>\n        <NavContainer>\n          <QuizList inverted={inverted} />\n        </NavContainer>\n      </Route>\n      <Route exact path={URL_ABOUT}>\n        <NavContainer>\n          <About />\n        </NavContainer>\n      </Route>\n      <Route exact path={URL_HOME}>\n        <NavContainer>\n          <Home />\n        </NavContainer>\n      </Route>\n      {QuizRegistry({ inverted }).map((quiz, i) => (\n        <Route exact path={quiz.path}>\n          {quiz.render}\n        </Route>\n      ))}\n    </Router>\n  );\n}\n\nApp.propTypes = {\n  inverted: PropTypes.bool,\n};\n\nApp.defaultProps = {\n  inverted: true,\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { Header, Segment, Container } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { error: null, errorInfo: null };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // Catch errors in any components below and re-render with error message\n    this.setState({\n      error,\n      errorInfo,\n    });\n  }\n\n  render() {\n    const { errorInfo, error } = this.state;\n    const { children, inverted } = this.props;\n\n    if (errorInfo) {\n      // Display the stack trace\n      return (\n        <Container style={{ marginTop: 32 }}>\n          <Segment inverted={inverted} color=\"red\">\n            <Header as=\"h1\">Something went wrong.</Header>\n            An error happened and the view could not be rendered.\n            <details style={{ whiteSpace: 'pre-wrap', marginTop: 24 }}>\n              {error && error.toString()}\n              <br />\n              {errorInfo.componentStack}\n            </details>\n          </Segment>\n        </Container>\n      );\n    }\n    // Normally, just render children\n    return children;\n  }\n}\n\nErrorBoundary.propTypes = {\n  children: PropTypes.element.isRequired,\n  inverted: PropTypes.bool,\n};\n\nErrorBoundary.defaultProps = {\n  inverted: false,\n};\n\nexport default ErrorBoundary;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport ErrorBoundary from './components/ErrorBoundary/index';\n\nReactDOM.render(\n  <ErrorBoundary>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </ErrorBoundary>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}