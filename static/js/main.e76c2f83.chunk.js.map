{"version":3,"sources":["components/About/index.js","components/URLs/index.js","files/bookCover.jpg","components/Home/index.js","components/QuizQuestion/constants.js","sounds/success.mp3","components/QuizQuestion/index.js","components/QuizContainer/index.js","components/Hebrew/index.js","components/Verb/ParsingAnswer.js","components/Verb/VerbParsingQuestion.js","components/QuizCompleteDialog/index.js","quizzes/ParsingQuiz/index.js","components/Utils/index.js","components/Questions/MatchingQuestion/index.js","quizzes/MatchingQuiz/index.js","components/Questions/MakeSentenceQuestion/index.js","quizzes/MakeSentenceQuiz/index.js","components/Persistence/index.js","components/Questions/MultipleChoiceQuestion/index.js","components/Questions/SelectCorrectTranslationQuestion/index.js","quizzes/SelectCorrectTranslationQuiz/index.js","components/QuizRegistry/index.js","components/QuizList/QuizStatus.js","components/QuizList/index.js","components/NavContainer/index.js","history.js","App.js","reportWebVitals.js","components/ErrorBoundary/index.js","index.js"],"names":["About","inverted","Container","text","style","marginTop","Header","as","href","defaultProps","URL_QUIZZES","URL_LETTERS","URL_BASIC_READINGS","URL_PRONOMINAL","URL_QAL_PERFECT","URL_QAL_IMPERFECT","URL_NOUN_PARSING","URL_CONJUNCTION","URL_FORMS_19","URL_FORMS_20","URL_VOCAB_4","URL_VOCAB_5","URL_TRANSLATIONS_5","URL_VOCAB_7","URL_VOCAB_8","URL_VOCAB_9","URL_VOCAB_11","URL_VOCAB_13","URL_VOCAB_14","URL_VOCAB_15","URL_VOCAB_16","URL_VOCAB_17","URL_VOCAB_18","URL_VOCAB_19","URL_VOCAB_20","URL_VOCAB_22","Home","history","src","bookCover","width","marginRight","marginBottom","float","alt","Button","primary","onClick","push","withRouter","UNANSWERED","CORRECT","INCORRECT","QuizQuestion","title","children","onSubmit","answerStatus","correctAnswer","useSound","successSfx","volume","playSuccess","Segment","Message","positive","negative","color","QuizContainer","subtitle","percent","onClose","Icon","name","Progress","success","PERSON_FIRST","PERSON_SECOND","PERSON_THIRD","PersonMap","getPersonText","value","GenderMap","NumberMap","getNumberText","genderOptions","key","ParsingAnswer","onChange","person","gender","number","disabled","allowMultiplePerson","height","display","flexDirection","Dropdown","multiple","selection","options","e","d","Menu","Item","active","VerbParsingQuestion","onAnswered","question","answer","useState","userAnswer","setUserAnswer","setAnswerStatus","setPerson","setGender","setNumber","p","g","n","Array","isArray","answersArray","sort","map","entry","join","COLORS","RADIAN","Math","PI","renderCustomizedLabel","cx","cy","midAngle","innerRadius","outerRadius","index","radius","x","cos","y","sin","fill","textAnchor","dominantBaseline","QuizCompleteDialog","quizName","correctAnswers","incorrectAnswers","data","PieChart","Pie","labelLine","dataKey","label","Cell","length","ParsingQuiz","questionSet","onQuizDone","questionNumber","setQuestionNumber","setIncorrectAnswers","correct","shuffle","array","randomIndex","currentIndex","floor","random","vocabularyQuizTitle","chapter","getQuizIDFromURL","path","substring","MatchingQuestion","questionsFontSize","questionsPadding","answersFontSize","answersPadding","selectedQuestion","setSelectedQuestion","selectedAnswer","setSelectedAnswer","completedQuestions","setCompletedQuestions","completedAnswers","setCompletedAnswers","shuffledQuestions","setShuffledQuestions","shuffledAnswers","setShuffledAnswers","isQuestionAnswered","i","includes","isAnswered","useEffect","answersIndexes","forEach","definition","getIndexOfAnswers","concat","placeholder","Grid","columns","stackable","textAlign","Divider","vertical","Row","verticalAlign","Column","vocabEntry","fontSize","padding","fluid","word","maxPerPage","MatchingQuiz","pageNumber","setPageNumber","pageCount","ceil","currentPage","setCurrentPage","startOffset","endOffset","slice","MakeSentenceQuestion","sentence","chosenIndexes","setChosenIndexes","answerWordList","setAnswerWordList","answerWordLabelList","isChosen","Label","answerWordsShuffled","split","constructedAnswer","wordForIndex","filter","reverse","answerWords","isWrong","MakeSentenceQuiz","QUIZ_STATUSES_NAME","getQuizStatus","quizID","storageOverride","quizStatuses","getQuizStatuses","storage","localStorage","getItem","quizStatusesParsed","JSON","parse","err","console","warn","setQuizStatuses","setItem","stringify","setQuizStatus","status","dateUpdated","Date","now","MultipleChoiceQuestion","answers","answerFontSize","sentenceFontSize","answerPadding","setAnswersList","answersShuffled","indexOf","possibleAnswer","SelectCorrectTranslationQuestion","SelectCorrectTranslationQuiz","QuizRegistry","quizList","render","chapter_2_letters","genesis_1_shema","chapter_4","chapter_4_nouns","chapter_4_conjunction","chapter_5","chapter_5_translations","chapter_7","chapter_8","chapter_8_pronominal","chapter_9","chapter_11","qal_perfect_qatal","chapter_13","qal_imperfect_qatal","chapter_14","chapter_15","chapter_16","chapter_17","chapter_18","chapter_19","chapter_19_forms","chapter_20","chapter_20_forms","chapter_22","first","second","QuizStatus","quizInfo","size","QUIZTYPE_ALL","QUIZTYPE_VOCAB","QUIZTYPE_PARADIGM","QUIZCATEGORY_ALL","QUIZCATEGORY_WRONG","QUIZCATEGORY_RIGHT","QUIZCATEGORY_NOT_DONE","isVocab","quiz","filterQuizzes","quizzes","search","quizType","quizCategory","match","searchLower","toLowerCase","Object","entries","searchQuizzes","filterQuizzesByCategory","filterQuizzesByType","categoryOptions","QuizList","setSearch","setQuizType","setQuizCategory","filteredQuizzes","quizRows","Table","to","dividing","Group","Link","event","defaultValue","simple","item","Input","icon","basic","celled","collapsing","HeaderCell","Body","warning","header","content","TabMenuItem","activeOnlyWhenExact","useRouteMatch","exact","NavContainer","createBrowserHistory","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ErrorBoundary","props","state","error","errorInfo","this","setState","whiteSpace","toString","componentStack","React","Component","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e76c2f83.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Header, Container } from \"semantic-ui-react\";\n\nfunction About({ inverted }) {\n  return (\n    <Container text style={{ marginTop: 32 }}>\n      <p>\n        <Header as='h1'>About</Header>\n        This website was made by Luke Murphey. This is an open-source project and you can get the source-code\n        on <a href=\"https://github.com/LukeMurphey/hebrew_quizzes\">Github</a>. You may be interested in some\n        of my other projects, including <a href=\"https://textcritical.net\">TextCritical.net</a>, a\n        website dedicated to the study of ancient Greek.\n      </p>\n    </Container>\n  );\n}\n\nAbout.propTypes = {\n  inverted: PropTypes.bool,\n};\n\nAbout.defaultProps = {\n  inverted: false,\n};\n\nexport default About;\n","export const URL_HOME = '/';\nexport const URL_QUIZZES = '/quizzes';\nexport const URL_ABOUT = '/about';\n\n// Quizzes\nexport const URL_LETTERS = '/letters';\nexport const URL_BASIC_READINGS = '/basic_readings';\nexport const URL_PRONOMINAL = '/pronominal';\nexport const URL_QAL_PERFECT = '/qalperfect';\nexport const URL_QAL_IMPERFECT = '/qalimperfect';\nexport const URL_NOUN_PARSING = '/noun_parsing';\nexport const URL_CONJUNCTION = '/conjunction';\nexport const URL_FORMS_19 = '/forms_19';\nexport const URL_FORMS_20 = '/forms_20';\n\n// Vocab\nexport const URL_VOCAB_4 = '/vocab_4';\nexport const URL_VOCAB_5 = '/vocab_5';\nexport const URL_TRANSLATIONS_5 = '/translations_5';\nexport const URL_VOCAB_7 = '/vocab_7';\nexport const URL_VOCAB_8 = '/vocab_8';\nexport const URL_VOCAB_9 = '/vocab_9';\nexport const URL_VOCAB_11 = '/vocab_11';\nexport const URL_VOCAB_13 = '/vocab_13';\nexport const URL_VOCAB_14 = '/vocab_14';\nexport const URL_VOCAB_15 = '/vocab_15';\nexport const URL_VOCAB_16 = '/vocab_16';\nexport const URL_VOCAB_17 = '/vocab_17';\nexport const URL_VOCAB_18 = '/vocab_18';\nexport const URL_VOCAB_19 = '/vocab_19';\nexport const URL_VOCAB_20 = '/vocab_20';\nexport const URL_VOCAB_22 = '/vocab_22';\n\nexport function urlVocab(chapter){\n    return `/vocab_${chapter}`;\n}\n","export default __webpack_public_path__ + \"static/media/bookCover.f334d199.jpg\";","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Header, Container, Button } from \"semantic-ui-react\";\nimport { withRouter } from \"react-router-dom\";\nimport { URL_QUIZZES } from \"../URLs/index\";\nimport bookCover from'../../files/bookCover.jpg';\n\nfunction Home({ inverted, history }) {\n  return (\n    <Container text style={{ marginTop: 32 }}>\n      <p>\n        <Header as='h1'>Hebrew Quizzes for Learning Biblical Hebrew</Header>\n        <img src={bookCover} style={{width: \"25%\", marginRight: 16, marginBottom: 16, float: \"left\"}} alt=\"bookCover\" />\n        This web-app provides a series of interactive quizzes to help students attempting to learn\n        ancient Hebrew using Kutz and Josberger's book \"Learning Biblical Hebrew.\" You can purchase\n        the book on <a href=\"https://www.amazon.com/Learning-Biblical-Hebrew-Comprehension-Introductory/dp/1683590848\">Amazon.com</a> or <a href=\"https://lexhampress.com/product/147180/learning-biblical-hebrew-reading-for-comprehension-an-introductory-grammar\">Lexham press</a>.\n      </p>\n      <p>\n        <Button primary onClick={() => history.push(URL_QUIZZES)}>Go to the quizzes</Button>\n      </p>\n    </Container>\n  );\n}\n\nHome.propTypes = {\n  inverted: PropTypes.bool,\n  history: PropTypes.object.isRequired,\n};\n\nHome.defaultProps = {\n  inverted: false,\n};\n\nexport default withRouter(Home);\n","export const UNANSWERED = 'unanswered';\nexport const CORRECT = 'correct';\nexport const INCORRECT = 'incorrect';\n","export default __webpack_public_path__ + \"static/media/success.8e6b4875.mp3\";","/**\n * This component provides a single quiz question.\n * \n * There are several props you will want to use:\n *   onSubmit: providing this will cause the question to show a \"submit\" button. The callback will be called when the\n *             user pressed the button.\n *   answerStatus: indicates if the answer was correct, incorrect, or unanswered. This causes the dialog to show a\n *                 little green or red banner telling they got it right/wrong.\n *   correctAnswer: the string that should be shown when the user gets the answer wrong\n */\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport useSound from 'use-sound';\nimport { Header, Segment, Button, Message } from \"semantic-ui-react\";\nimport { UNANSWERED, CORRECT, INCORRECT } from \"./constants\";\nimport successSfx from '../../sounds/success.mp3';\n\nfunction QuizQuestion({\n  title,\n  inverted,\n  children,\n  onSubmit,\n  answerStatus,\n  correctAnswer,\n}) {\n\n  const [playSuccess] = useSound(\n    successSfx,\n    { volume: 0.25 }\n  );\n\n  // Play the success sound if the user got it right\n  if(answerStatus === CORRECT){\n    playSuccess();\n  }\n\n  return (\n    <Segment inverted={inverted}>\n      <Header as=\"h2\">{title}</Header>\n      <div>{children}</div>\n      <div style={{ marginTop: 16 }}>\n        {answerStatus === UNANSWERED && onSubmit !== null && (\n          <Button onClick={() => onSubmit()}>Submit</Button>\n        )}\n        {answerStatus === CORRECT && onSubmit !== null && (\n          <>\n            <Message positive>\n              <Message.Header>Yay</Message.Header>\n              <p>The answer is correct.</p>\n            </Message>\n\n            <Button positive onClick={() => onSubmit()}>\n              Next\n            </Button>\n          </>\n        )}\n        {answerStatus === INCORRECT && onSubmit !== null && (\n          <>\n            <Message negative>\n              <Message.Header>Oops</Message.Header>\n              <p>\n                The answer is not correct.\n                {correctAnswer !== null &&\n                  ` The correct answer is \"${correctAnswer}\"`}\n              </p>\n            </Message>\n            <Button color=\"red\" onClick={() => onSubmit()}>\n              Try Again\n            </Button>\n          </>\n        )}\n      </div>\n    </Segment>\n  );\n}\n\nQuizQuestion.propTypes = {\n  title: PropTypes.string.isRequired,\n  inverted: PropTypes.bool,\n  answerStatus: PropTypes.oneOf([UNANSWERED, CORRECT, INCORRECT]),\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n  onSubmit: PropTypes.func,\n  correctAnswer: PropTypes.string,\n};\n\nQuizQuestion.defaultProps = {\n  inverted: false,\n  answerStatus: null,\n  correctAnswer: null,\n  onSubmit: null,\n};\n\nexport default QuizQuestion;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Header, Container, Progress, Icon } from \"semantic-ui-react\";\nimport { withRouter } from \"react-router-dom\";\n\nfunction QuizContainer({\n  title,\n  subtitle,\n  inverted,\n  percent,\n  onClose,\n  children\n}) {\n  return (\n    <Container style={{ marginTop: 32 }}>\n      <p>\n        <Icon name=\"close\" onClick={() => onClose()} />\n        {percent !== null && (\n          <Progress percent={percent} success />\n        )}\n        <Header as=\"h2\">{title}</Header>\n        <Header as=\"h3\" color=\"grey\">\n          {subtitle}\n        </Header>\n        {children}\n      </p>\n    </Container>\n  );\n}\n\nQuizContainer.propTypes = {\n  title: PropTypes.string,\n  subtitle: PropTypes.string,\n  inverted: PropTypes.bool,\n  percent: PropTypes.number,\n  onClose: PropTypes.func,\n};\n\nQuizContainer.defaultProps = {\n  inverted: false,\n  percent: null,\n};\n\nexport default withRouter(QuizContainer);\n","\n/**\n * Person\n */\nexport const PERSON_FIRST = '1';\nexport const PERSON_SECOND = '2';\nexport const PERSON_THIRD = '3';\n\nexport const PersonMap = {\n    '1': 'First',\n    '2': 'Second',\n    '3': 'Third',\n}\n\nexport function getPersonText(value) {\n    if (!value) {\n        return \"Person\";\n    }\n    return `${PersonMap[value]} Person`;\n};\n\n/**\n * Gender\n */\nexport const GENDER_MASC = 'm';\nexport const GENDER_FEM = 'f';\nexport const GENDER_COM = 'c';\nexport const GENDER_NEUT = 'n';\n\nexport const GenderMap = {\n    'm': 'Masculine',\n    'f': 'Feminine',\n    'c': 'Common',\n    'n': 'Neuter',\n}\n\nexport function getGenderText(value) {\n    if (!value) {\n        return \"Gender\";\n    }\n    return GenderMap[value];\n};\n\n/**\n * Number\n */\nexport const NUMBER_SINGULAR = 's';\nexport const NUMBER_DUAL = 'd';\nexport const NUMBER_PLURAL = 'p';\n\nexport const NumberMap = {\n    's': 'Singular',\n    'd': 'Dual',\n    'p': 'Plural',\n}\n\nexport function getNumberText(value) {\n    if (!value) {\n        return \"Number\";\n    }\n    return NumberMap[value];\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Dropdown } from \"semantic-ui-react\";\nimport {\n  PERSON_FIRST,\n  PERSON_SECOND,\n  PERSON_THIRD,\n  getPersonText,\n  GENDER_MASC,\n  GENDER_FEM,\n  GENDER_COM,\n  GENDER_NEUT,\n  getGenderText,\n  NUMBER_SINGULAR,\n  NUMBER_DUAL,\n  NUMBER_PLURAL,\n  getNumberText,\n} from \"../Hebrew/index\";\n\nconst genderOptions = [\n  { key: PERSON_FIRST, text: getPersonText(PERSON_FIRST), value: PERSON_FIRST },\n  {\n    key: PERSON_SECOND,\n    text: getPersonText(PERSON_SECOND),\n    value: PERSON_SECOND,\n  },\n  { key: PERSON_THIRD, text: getPersonText(PERSON_THIRD), value: PERSON_THIRD },\n];\n\nfunction ParsingAnswer({\n  inverted,\n  onChange,\n  person,\n  gender,\n  number,\n  disabled,\n  allowMultiplePerson,\n}) {\n  return (\n    <div style={{ height: 32, display: \"flex\", flexDirection: \"row\" }}>\n      {allowMultiplePerson === true && (\n        <Dropdown\n          disabled={disabled}\n          multiple\n          selection\n          options={genderOptions}\n          style={{ marginRight: 16 }}\n          onChange={(e, d) => {\n            onChange(d.value, gender, number);\n          }}\n          value={person}\n        />\n      )}\n      {allowMultiplePerson === false && (\n        <Dropdown\n          disabled={disabled}\n          multiple\n          selection\n          text={getPersonText(person)}\n          style={{ marginRight: 16 }}\n        >\n          <Dropdown.Menu>\n            <Dropdown.Item\n              active={person === PERSON_FIRST}\n              text=\"First\"\n              onClick={() => {\n                onChange(PERSON_FIRST, gender, number);\n              }}\n            />\n            <Dropdown.Item\n              active={person === PERSON_SECOND}\n              text=\"Second\"\n              onClick={() => {\n                onChange(PERSON_SECOND, gender, number);\n              }}\n            />\n            <Dropdown.Item\n              active={person === PERSON_THIRD}\n              text=\"Third\"\n              onClick={() => {\n                onChange(PERSON_THIRD, gender, number);\n              }}\n            />\n          </Dropdown.Menu>\n        </Dropdown>\n      )}\n      <div style={{ width: 200 }}>\n        <Dropdown\n          disabled={disabled}\n          selection\n          text={getGenderText(gender)}\n          style={{ marginRight: 16 }}\n        >\n          <Dropdown.Menu>\n            <Dropdown.Item\n              active={gender === GENDER_MASC}\n              text=\"Masculine\"\n              onClick={() => {\n                onChange(person, GENDER_MASC, number);\n              }}\n            />\n            <Dropdown.Item\n              active={gender === GENDER_FEM}\n              text=\"Feminine\"\n              onClick={() => {\n                onChange(person, GENDER_FEM, number);\n              }}\n            />\n            <Dropdown.Item\n              active={gender === GENDER_COM}\n              text=\"Common\"\n              onClick={() => {\n                onChange(person, GENDER_COM, number);\n              }}\n            />\n            <Dropdown.Item\n              active={gender === GENDER_NEUT}\n              text=\"Neuter\"\n              onClick={() => {\n                onChange(person, GENDER_NEUT, number);\n              }}\n            />\n          </Dropdown.Menu>\n        </Dropdown>\n      </div>\n      <div style={{ width: 200 }}>\n        <Dropdown disabled={disabled} selection text={getNumberText(number)}>\n          <Dropdown.Menu>\n            <Dropdown.Item\n              active={number === NUMBER_SINGULAR}\n              text=\"Singular\"\n              onClick={() => {\n                onChange(person, gender, NUMBER_SINGULAR);\n              }}\n            />\n            <Dropdown.Item\n              active={number === NUMBER_DUAL}\n              text=\"Dual\"\n              onClick={() => {\n                onChange(person, gender, NUMBER_DUAL);\n              }}\n            />\n            <Dropdown.Item\n              active={number === NUMBER_PLURAL}\n              text=\"Plural\"\n              onClick={() => {\n                onChange(person, gender, NUMBER_PLURAL);\n              }}\n            />\n          </Dropdown.Menu>\n        </Dropdown>\n      </div>\n    </div>\n  );\n}\n\nParsingAnswer.propTypes = {\n  inverted: PropTypes.bool,\n  disabled: PropTypes.bool,\n  onChange: PropTypes.func.isRequired,\n  allowMultiplePerson: PropTypes.bool,\n  person: PropTypes.oneOf([PERSON_FIRST, PERSON_SECOND, PERSON_THIRD, null]),\n  gender: PropTypes.oneOf([\n    GENDER_MASC,\n    GENDER_FEM,\n    GENDER_COM,\n    GENDER_NEUT,\n    null,\n  ]),\n  number: PropTypes.oneOf([NUMBER_SINGULAR, NUMBER_PLURAL, NUMBER_DUAL, null]),\n};\n\nParsingAnswer.defaultProps = {\n  inverted: false,\n  disabled: false,\n  person: null,\n  gender: null,\n  number: null,\n  allowMultiplePerson: false,\n};\n\nexport default ParsingAnswer;\n","/**\n * This offers a verb parsing question. This users several other components:\n *    QuizQuestion: offers the question alone with the submit buttons\n *    VerbParsingAnswer: offers the dropdowns for selecting the verb parsing\n */\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withRouter } from \"react-router-dom\";\nimport QuizQuestion from \"../QuizQuestion\";\nimport { UNANSWERED, CORRECT, INCORRECT } from \"../QuizQuestion/constants\";\nimport QuizContainer from \"../QuizContainer\";\nimport ParsingAnswer from \"../Verb/ParsingAnswer\";\n\n// https://github.com/LukeMurphey/learning_biblical_hebrew_flashcards/blob/master/qal_perfect_qatal.csv\nfunction VerbParsingQuestion({\n  title,\n  subtitle,\n  inverted,\n  percent,\n  onClose,\n  onAnswered,\n  question,\n  answer,\n  allowMultiplePerson,\n}) {\n  const [userAnswer, setUserAnswer] = useState(null);\n  const [answerStatus, setAnswerStatus] = useState(UNANSWERED);\n\n  const [person, setPerson] = useState(null);\n  const [gender, setGender] = useState(null);\n  const [number, setNumber] = useState(null);\n\n  return (\n    <QuizContainer\n      title={title}\n      subtitle={subtitle}\n      percent={percent}\n      onClose={onClose}\n  >\n      <QuizQuestion\n        title={question}\n        onSubmit={() => {\n          if(answerStatus === CORRECT || answerStatus === INCORRECT) {\n            // We have confirmed the answer status and now need to move to the next question\n            setAnswerStatus(UNANSWERED);\n\n            // Reset the answer\n            setPerson(null);\n            setGender(null);\n            setNumber(null);\n          }\n\n          // If the answer status is correct, then the user has acknowledged the correct answer and wants to move on\n          if(answerStatus === CORRECT ) {\n            // Tell the caller that the question was answered and we should move to the next question\n            onAnswered(true);\n          }\n\n          // If the answer status is incorrect, then the user has acknowledged the correct answer and wants to move on\n          if(answerStatus === INCORRECT ) {\n            // Tell the caller that the question was answered and we should move to the next question\n            onAnswered(false);\n          }\n\n          // Stop if the user hasn't filled out enough of the answer\n          // Otherwise, set the answer status\n          else if (answerStatus === UNANSWERED && person !== null && gender !== null && number !== null) {\n            // TODO evaluate multi answers\n            /*\n            let answer = \n            if(Array.isArray(person) {\n\n            }\n            */\n            setAnswerStatus(userAnswer === answer ? CORRECT : INCORRECT);\n          }\n        }}\n        answerStatus={answerStatus}\n        correctAnswer={answer}\n      >\n        <ParsingAnswer\n          inverted={inverted}\n          question={question}\n          onChange={(p, g, n) => {\n            setPerson(p);\n            setGender(g);\n            setNumber(n);\n\n            if (p && g && n) {\n              // If the person is multiple, then format accordingly\n              if(Array.isArray(p)){\n                // Sort the answer such that the number is first\n                let personSorted = p.sort();\n\n                // Form the answers\n                let answersArray = personSorted.map((entry) => `${entry}${g}${n}`);\n\n                // Make the list into a string\n                setUserAnswer(answersArray.join('/'));\n              }\n              else{\n                setUserAnswer(`${p}${g}${n}`);\n              }\n            }\n          }}\n          person={person}\n          gender={gender}\n          number={number}\n          disabled={answerStatus !== UNANSWERED}\n          allowMultiplePerson={allowMultiplePerson}\n        />\n      </QuizQuestion>\n    </QuizContainer>\n  );\n}\n\nVerbParsingQuestion.propTypes = {\n  title: PropTypes.string,\n  subtitle: PropTypes.string,\n  question: PropTypes.string,\n  answer: PropTypes.string,\n  inverted: PropTypes.bool,\n  percent: PropTypes.number,\n  onClose: PropTypes.func,\n  onAnswered: PropTypes.func,\n  allowMultiplePerson: PropTypes.bool,\n};\n\nVerbParsingQuestion.defaultProps = {\n  inverted: false,\n  percent: null,\n  allowMultiplePerson: false,\n};\n\nexport default withRouter(VerbParsingQuestion);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Header, Container, Button } from \"semantic-ui-react\";\nimport { withRouter } from \"react-router-dom\";\nimport { PieChart, Pie, Cell } from \"recharts\";\nimport { URL_QUIZZES } from \"../URLs/index\";\n\n// Create the set of colors to use\nconst COLORS = [\"#DD2230\", \"#4AB93A\"];\n\nconst RADIAN = Math.PI / 180;\nconst renderCustomizedLabel = ({\n  cx,\n  cy,\n  midAngle,\n  innerRadius,\n  outerRadius,\n  percent,\n  index,\n}) => {\n  const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n  const x = cx + radius * Math.cos(-midAngle * RADIAN);\n  const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n  return (\n    <text\n      x={x}\n      y={y}\n      fill=\"white\"\n      textAnchor={x > cx ? \"start\" : \"end\"}\n      dominantBaseline=\"central\"\n    >\n      {index === 0 && percent > 0 && \"✘\"}\n      {index !== 0 && percent > 0 && \"✔\"}\n    </text>\n  );\n};\nfunction QuizCompleteDialog({\n  quizName,\n  correctAnswers,\n  incorrectAnswers,\n  inverted,\n  history,\n}) {\n  // Create the data for the pie-chart\n  const data = [\n    {\n      name: \"Incorrect\",\n      value: incorrectAnswers,\n    },\n    {\n      name: \"Correct\",\n      value: correctAnswers,\n    },\n  ];\n\n  return (\n    <Container style={{ marginTop: 32 }}>\n      <p>\n        <Header as=\"h2\">\n          You have successfully completed the quiz for {quizName}\n        </Header>\n        {correctAnswers !== null && incorrectAnswers !== null && (\n          <PieChart width={200} height={200}>\n            <Pie\n              data={data}\n              cx=\"50%\"\n              cy=\"50%\"\n              labelLine={false}\n              outerRadius={80}\n              fill=\"#8884d8\"\n              dataKey=\"value\"\n              label={renderCustomizedLabel}\n            >\n              {data.map((entry, index) => (\n                <Cell\n                  key={`cell-${index}`}\n                  fill={COLORS[index % COLORS.length]}\n                />\n              ))}\n            </Pie>\n          </PieChart>\n        )}\n        <Button onClick={() => history.push(URL_QUIZZES)}>\n          Return to Quiz List\n        </Button>\n      </p>\n    </Container>\n  );\n}\n\nQuizCompleteDialog.propTypes = {\n  quizName: PropTypes.string,\n  inverted: PropTypes.bool,\n  history: PropTypes.object.isRequired,\n  incorrectAnswers: PropTypes.number,\n  correctAnswers: PropTypes.number,\n};\n\nQuizCompleteDialog.defaultProps = {\n  inverted: false,\n  incorrectAnswers: null,\n  correctAnswers: null,\n};\n\nexport default withRouter(QuizCompleteDialog);\n","/**\n * This quiz offers the ability to parse verbs.\n * \n *    1) ParsingQuiz: takes a list of verb parsing questions and present them one-by-one\n *    2) VerbParsingQuestion: presents one parsing question to the user\n *    3) ParsingAnswer: presents the UI for selecting a parse and communicates it back up to the parent\n * \n * The answer is evaluated for correctness in the QuizQuestion::onSubmit in VerbParsingQuestion.\n */\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport VerbParsingQuestion from \"../../components/Verb/VerbParsingQuestion\";\nimport { URL_QUIZZES } from \"../../components/URLs/index\";\nimport { withRouter } from \"react-router-dom\";\nimport QuizCompleteDialog from \"../../components/QuizCompleteDialog/index\";\n\nfunction ParsingQuiz({ subtitle, inverted, history, title, questionSet, allowMultiplePerson, onQuizDone }) {\n  const [questionNumber, setQuestionNumber] = useState(0);\n  const [incorrectAnswers, setIncorrectAnswers] = useState(0);\n\n  let question = null;\n\n  // If the question is within the list, then get it\n  // Otherwise, if it after the end then we have completed the quiz\n  if (questionNumber < questionSet.length) {\n    question = questionSet[questionNumber];\n  }\n\n  // If we are done, then report the quiz status\n  if(!question) {\n    onQuizDone(incorrectAnswers === 0);\n  }\n\n  return (\n    <>\n      {!question && (\n        <QuizCompleteDialog\n          quizName={title}\n          correctAnswers={questionSet.length}\n          incorrectAnswers={incorrectAnswers}\n        />\n      )}\n      {question && (\n        <VerbParsingQuestion\n          title={title}\n          subtitle={subtitle}\n          question={`Parse this verb: ${question[\"question\"]}`}\n          answer={question[\"answer\"]}\n          percent={100 * (questionNumber / questionSet.length)}\n          inverted={inverted}\n          allowMultiplePerson={allowMultiplePerson}\n          onClose={() => history.push(URL_QUIZZES)}\n          onAnswered={(correct) => {\n            if (correct) {\n              setQuestionNumber(1 + questionNumber);\n            }\n            if (!correct) {\n              setIncorrectAnswers(incorrectAnswers + 1);\n            }\n          }}\n        />\n      )}\n    </>\n  );\n}\n\nParsingQuiz.propTypes = {\n  title: PropTypes.string.isRequired,\n  inverted: PropTypes.bool,\n  history: PropTypes.object.isRequired,\n  questionSet: PropTypes.arrayOf(PropTypes.node).isRequired,\n  allowMultiplePerson: PropTypes.bool,\n  onQuizDone: PropTypes.func,\n};\n\nParsingQuiz.defaultProps = {\n  inverted: false,\n  allowMultiplePerson: false,\n  onQuizDone: () => {},\n};\n\nexport default withRouter(ParsingQuiz);\n","export function shuffle(array) {\n  // https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n  var currentIndex = array.length,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    // And swap it with the current element.\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex],\n      array[currentIndex],\n    ];\n  }\n\n  return array;\n}\n\nexport function vocabularyQuizTitle(chapter) {\n  return `Chapter ${chapter} Vocabulary`;\n}\n\nexport function getQuizIDFromURL(path) {\n  return path.substring(1,);\n}\n","/**\n * This component provides a way to provide a matching quiz of words to definitions.\n *\n * WARNING: there is a bug where you can have questions that can match more than one answer but not vice-versa.\n */\nimport React, { useState, useEffect } from \"react\";\nimport { Grid, Divider, Segment, Button } from \"semantic-ui-react\";\nimport PropTypes from \"prop-types\";\nimport { UNANSWERED } from \"../../QuizQuestion/constants\";\nimport QuizContainer from \"../../QuizContainer\";\nimport QuizQuestion from \"../../QuizQuestion\";\nimport { shuffle } from \"../../Utils/index\";\n\nfunction MatchingQuestion({\n  inverted,\n  title,\n  questionSet,\n  subtitle,\n  percent,\n  onClose,\n  onAnswered,\n  questionsFontSize,\n  questionsPadding,\n  answersFontSize,\n  answersPadding\n}) {\n  const [selectedQuestion, setSelectedQuestion] = useState(null);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n\n  const [answerStatus, setAnswerStatus] = useState(UNANSWERED);\n  const [completedQuestions, setCompletedQuestions] = useState([]);\n  const [completedAnswers, setCompletedAnswers] = useState([]);\n\n  // Track answer status\n  const [incorrectAnswers, setIncorrectAnswers] = useState(0);\n\n  // Shuffle both sets so that we can make sure the left and the right doesn't match\n  const [shuffledQuestions, setShuffledQuestions] = useState([]);\n  const [shuffledAnswers, setShuffledAnswers] = useState([]);\n\n  function isQuestionAnswered(i) {\n    return completedQuestions.includes(i);\n  }\n\n  function isAnswered(i) {\n    return completedAnswers.includes(i);\n  }\n\n  function getIndexOfAnswers(i) {\n    // Get the question for the index\n    const question = shuffledQuestions[i];\n\n    // Get the indexes\n    const answersIndexes = [];\n    shuffledAnswers.forEach((e, i) => {\n      if (e.definition === question.definition) {\n        answersIndexes.push(i);\n      }\n    });\n\n    return answersIndexes;\n  }\n\n  // Handle selection of answers\n  useEffect(() => {\n    // Evaluate the result if both an answer and question have been selected\n    if (selectedQuestion !== null && selectedAnswer !== null) {\n      // Determine what the correct answer is\n      const correctAnswerIndexes = getIndexOfAnswers(selectedQuestion);\n\n      // If correct, then update the UI accordingly\n      if (correctAnswerIndexes.includes(selectedAnswer)) {\n        // Add to the correct list\n        setCompletedQuestions(completedQuestions.concat([selectedQuestion]));\n        setCompletedAnswers(completedAnswers.concat([selectedAnswer]));\n\n        // Unselect the existing entries\n        setSelectedQuestion(null);\n        setSelectedAnswer(null);\n      } else {\n        // Record that we got something wrong\n        setIncorrectAnswers(incorrectAnswers + 1);\n      }\n    }\n  }, [selectedQuestion, selectedAnswer]);\n\n  // Prepare the questions and answers\n  useEffect(() => {\n    if (questionSet !== null) {\n      // Shuffle the questions and the answers so they don't match in an obvious way\n      setShuffledQuestions(shuffle([...questionSet]));\n      setShuffledAnswers(shuffle([...questionSet]));\n\n      setCompletedQuestions([]);\n      setCompletedAnswers([]);\n    }\n  }, [questionSet]);\n\n  // Handle the case where the user is done matching everything\n  useEffect(() => {\n    // If there are no more entries, then signal that we are done\n    if (\n      completedAnswers !== null &&\n      questionSet !== null &&\n      completedAnswers.length >= questionSet.length\n    ) {\n      // Send up the note that the question has been answered\n      onAnswered(incorrectAnswers === 0);\n    }\n  }, [completedAnswers]);\n\n  return (\n    <QuizContainer\n      title={title}\n      subtitle={subtitle}\n      percent={percent}\n      onClose={onClose}\n    >\n      <QuizQuestion\n        answerStatus={answerStatus}\n        // correctAnswer={answer}\n      >\n        <Segment placeholder>\n          <Grid columns={2} stackable textAlign=\"center\">\n            <Divider vertical>Click to Match</Divider>\n\n            <Grid.Row verticalAlign=\"middle\">\n              <Grid.Column>\n                {shuffledQuestions.map((vocabEntry, i) => (\n                  <Button\n                    key={i}\n                    style={{ marginTop: 12, fontSize: questionsFontSize, padding: questionsPadding }}\n                    disabled={isQuestionAnswered(i)}\n                    primary={selectedQuestion === i}\n                    onClick={() => setSelectedQuestion(i)}\n                    fluid\n                  >\n                    {vocabEntry.word}\n                  </Button>\n                ))}\n              </Grid.Column>\n              <Grid.Column>\n                {shuffledAnswers.map((vocabEntry, i) => (\n                  <Button\n                    key={i}\n                    style={{ marginTop: 12, fontSize: answersFontSize, padding: answersPadding }}\n                    disabled={isAnswered(i)}\n                    primary={selectedAnswer === i}\n                    onClick={() => setSelectedAnswer(i)}\n                    fluid\n                  >\n                    {vocabEntry.definition}\n                  </Button>\n                ))}\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Segment>\n      </QuizQuestion>\n    </QuizContainer>\n  );\n}\n\nMatchingQuestion.propTypes = {\n  inverted: PropTypes.bool,\n  title: PropTypes.string,\n  subtitle: PropTypes.string,\n  maxPerPage: PropTypes.number,\n  questionSet: PropTypes.arrayOf(PropTypes.node).isRequired,\n  percent: PropTypes.number,\n  onClose: PropTypes.func,\n  onAnswered: PropTypes.func,\n  questionsFontSize: PropTypes.number,\n  questionsPadding: PropTypes.number,\n  answersFontSize: PropTypes.number,\n  answersPadding: PropTypes.number,\n};\n\nMatchingQuestion.defaultProps = {\n  inverted: true,\n  maxPerPage: 5,\n  questionsFontSize: null,\n  questionsPadding: null,\n  answersFontSize: null,\n  answersPadding: null,\n};\n\nexport default MatchingQuestion;\n","/**\n * This component provides a way to provide a matching quiz of words to definitions.\n */\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withRouter } from \"react-router-dom\";\nimport { URL_QUIZZES } from \"../../components/URLs/index\";\nimport QuizCompleteDialog from \"../../components/QuizCompleteDialog/index\";\nimport MatchingQuestion from \"../../components/Questions/MatchingQuestion\";\n\nfunction MatchingQuiz({ inverted, title, maxPerPage, questionSet, onQuizDone, history }) {\n  const [pageNumber, setPageNumber] = useState(0);\n\n  // Chop up the vocab list\n  const pageCount = Math.ceil((1.0 * questionSet.length) / maxPerPage);\n  const [currentPage, setCurrentPage] = useState(null);\n\n  // Track answer status\n  const [incorrectAnswers, setIncorrectAnswers] = useState(0);\n\n  // Chop up the question set when the page number changes\n  useEffect(() => {\n    const startOffset = pageNumber * maxPerPage;\n    const endOffset = (pageNumber + 1) * maxPerPage;\n\n    setCurrentPage(questionSet.slice(startOffset, endOffset));\n  }, [pageNumber, questionSet, maxPerPage]);\n\n  // Send up status if we are done\n  if(pageNumber >= pageCount && onQuizDone) {\n    onQuizDone(incorrectAnswers === 0);\n  }\n\n  return (\n    <>\n      {pageNumber < pageCount && (\n        <MatchingQuestion\n          inverted={inverted}\n          title={title}\n          percent={100 * (pageNumber / pageCount)}\n          onClose={() => history.push(URL_QUIZZES)}\n          onAnswered={(correct) => {\n            setPageNumber(pageNumber + 1);\n            if(!correct){\n              setIncorrectAnswers(incorrectAnswers+ 1);\n            }\n          }}\n          questionSet={currentPage}\n          maxPerPage={maxPerPage}\n        />\n      )}\n      {pageNumber >= pageCount && <QuizCompleteDialog quizName={title} />}\n    </>\n  );\n}\n\nMatchingQuiz.propTypes = {\n  inverted: PropTypes.bool,\n  title: PropTypes.string,\n  maxPerPage: PropTypes.number,\n  questionSet: PropTypes.arrayOf(PropTypes.node).isRequired,\n  history: PropTypes.object.isRequired,\n  onQuizDone: PropTypes.func,\n};\n\nMatchingQuiz.defaultProps = {\n  inverted: true,\n  title: \"Vocabulary quiz\",\n  maxPerPage: 5,\n  onQuizDone: () => {},\n};\n\nexport default withRouter(MatchingQuiz);\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Label, Divider } from \"semantic-ui-react\";\nimport QuizContainer from \"../../QuizContainer\";\nimport QuizQuestion from \"../../QuizQuestion\";\nimport { shuffle } from \"../../Utils/index\";\nimport { UNANSWERED, CORRECT, INCORRECT } from \"../../QuizQuestion/constants\";\n\nfunction MakeSentenceQuestion({\n  inverted,\n  title,\n  subtitle,\n  percent,\n  onClose,\n  sentence,\n  onAnswered,\n  answer,\n}) {\n  // Track the words that the user has selected\n  const [chosenIndexes, setChosenIndexes] = useState([]);\n  const [correctIndexes, setCorrectIndexes] = useState([]);\n  const [answerWordList, setAnswerWordList] = useState(null);\n\n  const [answerStatus, setAnswerStatus] = useState(UNANSWERED);\n\n  /** \n   * Determine if the word is in the list that the user chose\n   */\n  function isChosen(index) {\n    return chosenIndexes.includes(index);\n  }\n\n  let answerWordLabelList = null;\n\n  /**\n   * Make the list of words to include in the list of options\n   */\n  if(answerWordList) {\n    answerWordLabelList = answerWordList.map((word, index) => {\n      if (!isChosen(index)) {\n        return (\n          <Label\n            onClick={() => {\n              setChosenIndexes(chosenIndexes.concat([index]));\n            }}\n            key={index}\n          >\n            {word}\n          </Label>\n        );\n      }\n\n      return null;\n    });\n  }\n\n  /**\n   * Construct the shuffled words list\n   */\n  useEffect(() => {\n    // Break up the answer into a list\n    const answerWords = answer ? answer.split(\" \") : [];\n\n    const answerWordsShuffled = shuffle(answerWords);\n    setAnswerWordList(answerWordsShuffled);\n  }, [answer]);\n\n  /**\n   * Make the currently selected list\n   */\n  const constructedAnswer = chosenIndexes.map((index) => {\n    // Get the word for the index\n    const wordForIndex = answerWordList[index];\n\n    return (\n      <Label\n        onClick={() =>\n          setChosenIndexes(chosenIndexes.filter((value) => {\n              return value !== index;\n            }))\n        }\n        key={index}\n      >\n        {wordForIndex}\n      </Label>\n    );\n  }).reverse();\n\n  /**\n   * Handle the user pressing \"submit\"\n   */\n  const submitAnswer = () => {\n    // We have confirmed the answer status and now need to move to the next question\n    if(answerStatus === CORRECT || answerStatus === INCORRECT) {\n      // We have confirmed the answer status and now need to move to the next question\n      setChosenIndexes([]);\n      setAnswerStatus(UNANSWERED);\n    }\n\n    // If the answer status is correct, then the user has acknowledged the correct answer and wants to move on\n    if(answerStatus === CORRECT ) {\n      // Tell the caller that the question was answered and we should move to the next question\n      onAnswered(true);\n    }\n\n    // If the answer status is incorrect, then the user has acknowledged the correct answer and wants to move on\n    if(answerStatus === INCORRECT ) {\n      // Tell the caller that the question was answered and we should move to the next question\n      onAnswered(false);\n    }\n\n    // Not answered yet\n    if(answerStatus === UNANSWERED && chosenIndexes.length > 0 ) {\n      // Construct the answer\n      const answerWords = answer ? answer.split(\" \") : [];\n\n      // Determine if the answer is correct\n      let isWrong = false;\n\n      answerWords.map((word, index) => {\n        // Get the word for the index\n        const wordForIndex = answerWords[index];\n\n        // Make sure that we have enough words\n        if(index >= chosenIndexes) {\n          isWrong = true;\n        }\n        else{\n          // Get the word that the user selected\n          const selectedWordForIndex = answerWordList[chosenIndexes[index]];\n\n          // Determine if this word is the same one from the expected list\n          if(wordForIndex !== selectedWordForIndex){\n            isWrong = true;\n          }\n        }\n      });\n\n      // Set the status accordingly\n      if(isWrong){\n        setAnswerStatus(INCORRECT);\n      }\n      else{\n        setAnswerStatus(CORRECT);\n      }\n    }\n  };\n\n  return (\n    <QuizContainer\n      title={title}\n      subtitle={subtitle}\n      percent={percent}\n      onClose={onClose}\n    >\n      <QuizQuestion\n        answerStatus={answerStatus}\n        onSubmit={submitAnswer}\n        correctAnswer={answer}>\n        <p><strong>Construct the following sentence in Hebrew:</strong></p>\n        {sentence}\n        <p><div style={{height: 32}}>{constructedAnswer}</div></p>\n        <Divider />\n        <p><strong>From the following words</strong></p>\n        <p><div style={{height: 32}}>{answerWordLabelList}</div></p>\n      </QuizQuestion>\n    </QuizContainer>\n  );\n}\n\nMakeSentenceQuestion.propTypes = {\n  inverted: PropTypes.bool,\n  title: PropTypes.string,\n  subtitle: PropTypes.string,\n  question: PropTypes.string.isRequired,\n  answer: PropTypes.string.isRequired,\n  onClose: PropTypes.func,\n  onAnswered: PropTypes.func,\n  percent: PropTypes.number,\n};\n\nMakeSentenceQuestion.defaultProps = {\n  inverted: false,\n};\n\nexport default MakeSentenceQuestion;\n","/**\n * This component provides a way to provide a matching quiz of words to definitions.\n *\n * Some caveats:\n *    * This doesn't support quizzes where the same question text is in the answers list more than once.\n */\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withRouter } from \"react-router-dom\";\nimport { URL_QUIZZES } from \"../../components/URLs/index\";\nimport QuizCompleteDialog from \"../../components/QuizCompleteDialog/index\";\nimport MakeSentenceQuestion from \"../../components/Questions/MakeSentenceQuestion/index\";\n\nfunction MakeSentenceQuiz({ inverted, title, questionSet, onQuizDone, history }) {\n  const [pageNumber, setPageNumber] = useState(0);\n  const [incorrectAnswers, setIncorrectAnswers] = useState(0);\n\n  // If we are done, then report the quiz status\n  if(pageNumber >= questionSet.length) {\n    onQuizDone(incorrectAnswers === 0);\n  }\n\n  return (\n    <>\n      {pageNumber < questionSet.length && (\n        <MakeSentenceQuestion\n          inverted={inverted}\n          title={`Construct ${questionSet[pageNumber].title}`}\n          sentence={questionSet[pageNumber].sentence}\n          answer={questionSet[pageNumber].answer}\n          onClose={() => history.push(URL_QUIZZES)}\n          onAnswered={(correct) => {\n            if(correct){\n                setPageNumber(pageNumber + 1);\n            }\n            if(!correct){\n              setIncorrectAnswers(incorrectAnswers+1);\n            }\n          }}\n          percent={100 * (pageNumber / questionSet.length)}\n        />\n      )}\n      {pageNumber >= questionSet.length && (\n        <QuizCompleteDialog quizName={title} />\n      )}\n    </>\n  );\n}\n\nMakeSentenceQuiz.propTypes = {\n  inverted: PropTypes.bool,\n  title: PropTypes.string,\n  questionSet: PropTypes.arrayOf(PropTypes.node).isRequired,\n  history: PropTypes.object.isRequired,\n  onQuizDone: PropTypes.func,\n};\n\nMakeSentenceQuiz.defaultProps = {\n  inverted: true,\n  title: \"Make a sentence\",\n  onQuizDone: () => {},\n};\n\nexport default withRouter(MakeSentenceQuiz);\n","const QUIZ_STATUSES_NAME = \"quizStatuses\";\n\nexport function storageAvailable(type) {\n  let storage;\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return (\n      e instanceof DOMException &&\n      // everything except Firefox\n      (e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === \"QuotaExceededError\" ||\n        // Firefox\n        e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      storage &&\n      storage.length !== 0\n    );\n  }\n}\n\nexport function getQuizStatus(quizID, storageOverride = null) {\n  const quizStatuses = getQuizStatuses(storageOverride);\n\n  if (quizStatuses !== null && quizID in quizStatuses) {\n    return quizStatuses[quizID];\n  }\n\n  return null;\n}\n\nexport function getQuizStatuses(storageOverride = null) {\n  const storage = storageOverride || localStorage;\n\n  // if (storageAvailable(\"localStorage\")) {\n  const quizStatuses = storage.getItem(QUIZ_STATUSES_NAME);\n\n  if (quizStatuses) {\n    try {\n      const quizStatusesParsed = JSON.parse(quizStatuses);\n\n      return quizStatusesParsed;\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.warn(\"The list of quiz statuses could not be loaded\");\n      return null; // The list could not be loaded\n    }\n  }\n\n  return null;\n}\n\nexport function setQuizStatuses(quizStatuses, storageOverride = null) {\n  const storage = storageOverride || localStorage;\n\n  storage.setItem(QUIZ_STATUSES_NAME, JSON.stringify(quizStatuses));\n}\n\nexport function setQuizStatus(quizID, status, storageOverride = null) {\n  const storage = storageOverride || localStorage;\n\n  // if (storageAvailable(\"localStorage\")) {\n  let quizStatuses = getQuizStatuses(storage);\n\n  // If it doesn't exist yet, then initialize it\n  if (!quizStatuses) {\n    quizStatuses = {};\n  }\n\n  // Set the quiz status\n  quizStatuses[quizID] = {\n    status,\n    dateUpdated: Date.now(),\n  };\n\n  // Save it\n  setQuizStatuses(quizStatuses, storageOverride);\n\n  // Return true noting that we were able to save it\n  return true;\n}\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button } from \"semantic-ui-react\";\nimport QuizContainer from \"../../QuizContainer\";\nimport QuizQuestion from \"../../QuizQuestion\";\nimport { shuffle } from \"../../Utils/index\";\nimport { UNANSWERED, CORRECT, INCORRECT } from \"../../QuizQuestion/constants\";\n\nfunction MultipleChoiceQuestion({\n  inverted,\n  title,\n  subtitle,\n  percent,\n  onClose,\n  sentence,\n  onAnswered,\n  fluid,\n  answer,\n  answers,\n  question,\n  answerFontSize,\n  sentenceFontSize,\n  answerPadding,\n}) {\n  const [answerStatus, setAnswerStatus] = useState(UNANSWERED);\n  const [answersList, setAnswersList] = useState(null);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n\n  /**\n   * Construct the shuffled words list\n   */\n  useEffect(() => {\n    // Shuffle the possible wrong answers\n    const answersShuffled = shuffle(answers);\n    setAnswersList(answersShuffled);\n  }, [answers]);\n\n  /**\n   * Determines what index is the one of the correct answer. \n   * @returns boolean\n   */\n  const determineCorrectIndex = () => {\n    return answers.indexOf(answer); \n  };\n\n  /**\n   * Handle the user pressing \"submit\"\n   */\n  const submitAnswer = () => {\n    // We have confirmed the answer status and now need to move to the next question\n    if (answerStatus === CORRECT || answerStatus === INCORRECT) {\n      setAnswerStatus(UNANSWERED);\n    }\n\n    // The user selected nothing\n    if(selectedAnswer === null) {\n      return;\n    }\n\n    const correctIndex = determineCorrectIndex();\n\n    // Set the status accordingly\n    if (correctIndex === selectedAnswer) {\n      setAnswerStatus(CORRECT);\n      // Send up the note that the question has been answered\n      onAnswered(true);\n    } else {\n      setAnswerStatus(INCORRECT);\n      // Send up the note that the question has been answered\n      onAnswered(false);\n    }\n  };\n\n  return (\n    <QuizContainer\n      title={title}\n      subtitle={subtitle}\n      percent={percent}\n      onClose={onClose}\n    >\n      <QuizQuestion\n        answerStatus={answerStatus}\n        onSubmit={submitAnswer}\n        correctAnswer={answer}\n      >\n        <p>{question}</p>\n        <p style={{fontSize: sentenceFontSize}}>{sentence}</p>\n        {answers && answers.map((possibleAnswer, i) => (\n                            <Button\n                            key={i}\n                            style={{ fontSize: answerFontSize, marginTop: 12, padding: answerPadding, }}\n                            primary={selectedAnswer === i}\n                            onClick={() => setSelectedAnswer(i)}\n                            fluid={fluid}\n                          >{possibleAnswer}</Button>\n        ))}\n      </QuizQuestion>\n    </QuizContainer>\n  );\n}\n\nMultipleChoiceQuestion.propTypes = {\n  inverted: PropTypes.bool,\n  title: PropTypes.string,\n  subtitle: PropTypes.string,\n  question: PropTypes.string.isRequired,\n  answer: PropTypes.string.isRequired,\n  answers: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onClose: PropTypes.func,\n  onAnswered: PropTypes.func,\n  percent: PropTypes.number,\n  fluid: PropTypes.bool,\n  answerFontSize: PropTypes.number,\n  sentenceFontSize: PropTypes.number,\n  answerPadding: PropTypes.number,\n};\n\nMultipleChoiceQuestion.defaultProps = {\n  inverted: false,\n  fluid: false,\n  answerFontSize: null,\n  answerPadding: null,\n  sentenceFontSize: null,\n};\n\nexport default MultipleChoiceQuestion;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport MultipleChoiceQuestion from \"../MultipleChoiceQuestion\";\n\nfunction SelectCorrectTranslationQuestion({\n  inverted,\n  title,\n  subtitle,\n  percent,\n  onClose,\n  sentence,\n  onAnswered,\n  answer,\n  answers,\n}) {\n  return (\n    <MultipleChoiceQuestion\n      title={title}\n      inverted={inverted}\n      subtitle={subtitle}\n      percent={percent}\n      onClose={onClose}\n      onAnswered={onAnswered}\n      correctAnswer={answer}\n      question={\"Select the Best Translation for:\"}\n      sentence={sentence}\n      answers={answers}\n      answerFontSize={'18px'}\n      answerPadding={'10px'}\n      sentenceFontSize={'20px'}\n    />\n  );\n}\n\nSelectCorrectTranslationQuestion.propTypes = {\n  inverted: PropTypes.bool,\n  title: PropTypes.string,\n  subtitle: PropTypes.string,\n  question: PropTypes.string.isRequired,\n  answer: PropTypes.string.isRequired,\n  answers: PropTypes.arrayOf(PropTypes.string).isRequired,\n  onClose: PropTypes.func,\n  onAnswered: PropTypes.func,\n  percent: PropTypes.number,\n};\n\nSelectCorrectTranslationQuestion.defaultProps = {\n  inverted: false,\n};\n\nexport default SelectCorrectTranslationQuestion;\n","/**\n * This quiz offers the ability to parse verbs.\n * \n *    1) ParsingQuiz: takes a list of verb parsing questions and present them one-by-one\n *    2) VerbParsingQuestion: presents one parsing question to the user\n *    3) ParsingAnswer: presents the UI for selecting a parse and communicates it back up to the parent\n * \n * The answer is evaluated for correctness in the QuizQuestion::onSubmit in VerbParsingQuestion.\n */\n import React, { useState } from \"react\";\n import PropTypes from \"prop-types\";\n import SelectCorrectTranslationQuestion from \"../../components/Questions/SelectCorrectTranslationQuestion\";\n import { URL_QUIZZES } from \"../../components/URLs/index\";\n import { withRouter } from \"react-router-dom\";\n import QuizCompleteDialog from \"../../components/QuizCompleteDialog/index\";\n \n function SelectCorrectTranslationQuiz({ subtitle, inverted, history, title, questionSet, allowMultiplePerson, onQuizDone }) {\n   const [questionNumber, setQuestionNumber] = useState(0);\n   const [incorrectAnswers, setIncorrectAnswers] = useState(0);\n \n   let question = null;\n \n   // If the question is within the list, then get it\n   // Otherwise, if it after the end then we have completed the quiz\n   if (questionNumber < questionSet.length) {\n     question = questionSet[questionNumber];\n   }\n \n   // If we are done, then report the quiz status\n   if(!question) {\n     onQuizDone(incorrectAnswers === 0);\n   }\n \n   return (\n     <>\n       {!question && (\n         <QuizCompleteDialog\n           quizName={title}\n           correctAnswers={questionSet.length}\n           incorrectAnswers={incorrectAnswers}\n         />\n       )}\n       {question && (\n         <SelectCorrectTranslationQuestion\n           title={title}\n           subtitle={subtitle}\n           sentence={question[\"sentence\"]}\n           answer={question[\"correct_answer\"]}\n           answers={question[\"answers\"]}\n           percent={100 * (questionNumber / questionSet.length)}\n           inverted={inverted}\n           onClose={() => history.push(URL_QUIZZES)}\n           onAnswered={(correct) => {\n             if (correct) {\n               setQuestionNumber(1 + questionNumber);\n             }\n             if (!correct) {\n               setIncorrectAnswers(incorrectAnswers + 1);\n             }\n           }}\n         />\n       )}\n     </>\n   );\n }\n \n SelectCorrectTranslationQuiz.propTypes = {\n   title: PropTypes.string.isRequired,\n   inverted: PropTypes.bool,\n   history: PropTypes.object.isRequired,\n   questionSet: PropTypes.arrayOf(PropTypes.node).isRequired,\n   onQuizDone: PropTypes.func,\n };\n \n SelectCorrectTranslationQuiz.defaultProps = {\n   inverted: false,\n   onQuizDone: () => {},\n };\n \n export default withRouter(SelectCorrectTranslationQuiz);\n ","import {\n  URL_LETTERS,\n  URL_QAL_PERFECT,\n  URL_QAL_IMPERFECT,\n  URL_VOCAB_4,\n  URL_NOUN_PARSING,\n  URL_CONJUNCTION,\n  URL_VOCAB_5,\n  URL_TRANSLATIONS_5,\n  URL_VOCAB_7,\n  URL_VOCAB_8,\n  URL_VOCAB_9,\n  URL_VOCAB_11,\n  URL_VOCAB_13,\n  URL_VOCAB_14,\n  URL_VOCAB_15,\n  URL_VOCAB_16,\n  URL_VOCAB_17,\n  URL_VOCAB_18,\n  URL_VOCAB_19,\n  URL_FORMS_19,\n  URL_FORMS_20,\n  URL_VOCAB_20,\n  URL_VOCAB_22,\n  URL_PRONOMINAL,\n  URL_BASIC_READINGS,\n} from \"../URLs/index\";\nimport ParsingQuiz from \"../../quizzes/ParsingQuiz/index\";\nimport MatchingQuiz from \"../../quizzes/MatchingQuiz/index\";\nimport MakeSentenceQuiz from \"../../quizzes/MakeSentenceQuiz/index\";\n\nimport genesis_1_shema from \"../../data//genesis_1_shema.json\";\nimport chapter_2_letters from \"../../data/chapter_2_letters.json\";\nimport chapter_4 from \"../../data/chapter_4.json\";\nimport chapter_4_nouns from \"../../data/chapter_4_nouns.json\";\nimport chapter_4_conjunction from \"../../data/chapter_4_conjunction.json\";\nimport chapter_5 from \"../../data/chapter_5.json\";\nimport chapter_5_translations from \"../../data/chapter_5_translations.json\";\nimport chapter_7 from \"../../data/chapter_7.json\";\nimport chapter_8 from \"../../data/chapter_8.json\";\nimport chapter_8_pronominal from \"../../data/chapter_8_pronominal.json\";\nimport chapter_9 from \"../../data/chapter_9.json\";\nimport chapter_11 from \"../../data/chapter_11.json\";\nimport chapter_13 from \"../../data/chapter_13.json\";\nimport chapter_14 from \"../../data/chapter_14.json\";\nimport chapter_15 from \"../../data/chapter_15.json\";\nimport chapter_16 from \"../../data/chapter_16.json\";\nimport chapter_17 from \"../../data/chapter_17.json\";\nimport chapter_18 from \"../../data/chapter_18.json\";\nimport chapter_19 from \"../../data/chapter_19.json\";\nimport chapter_19_forms from \"../../data/chapter_19_forms.json\";\nimport chapter_20_forms from \"../../data/chapter_20_forms.json\";\nimport chapter_20 from \"../../data/chapter_20.json\";\nimport chapter_22 from \"../../data/chapter_22.json\";\nimport qal_perfect_qatal from \"../../data/chapter_12_qal_perfect_qatal.json\";\nimport qal_imperfect_qatal from \"../../data/chapter_13_qal_imperfect_qatal.json\";\n\nimport { shuffle, vocabularyQuizTitle, getQuizIDFromURL } from \"../Utils/index\";\nimport { setQuizStatus } from \"../Persistence\";\nimport SelectCorrectTranslationQuiz from \"../../quizzes/SelectCorrectTranslationQuiz\";\n\nexport default function QuizRegistry({ inverted }) {\n  const quizList = [\n    {\n      title: \"Letters\",\n      chapter: 2,\n      path: URL_LETTERS,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={\"Letters\"}\n          questionSet={shuffle(chapter_2_letters)}\n          maxPerPage={15}\n          onQuizDone={(status) => setQuizStatus(getQuizIDFromURL(URL_LETTERS), status )}\n        />\n      ),\n    },\n    {\n      title: \"Passage Memorization (Gen. 1 and Dt. 6)\",\n      chapter: 3,\n      path: URL_BASIC_READINGS,\n      render: (\n        <MakeSentenceQuiz\n          inverted={inverted}\n          title={\"Test your memorization of Genesis and Deuteronomy 6:4-5\"}\n          questionSet={genesis_1_shema}\n          onQuizDone={(status) => setQuizStatus(getQuizIDFromURL(URL_BASIC_READINGS), status )}\n        />\n      ),\n    },\n    {\n      title: \"Chapter 4 Vocabulary\",\n      chapter: 4,\n      path: URL_VOCAB_4,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={vocabularyQuizTitle(4)}\n          questionSet={shuffle(chapter_4)}\n          onQuizDone={(status) => setQuizStatus(getQuizIDFromURL(URL_VOCAB_4), status )}\n        />\n      ),\n    },\n    {\n      title: \"Noun Parsing\",\n      chapter: 4,\n      path: URL_NOUN_PARSING,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={\"Noun Parsing\"}\n          subtitle={\"Match the noun with the correct form\"}\n          questionSet={shuffle(chapter_4_nouns)}\n          maxPerPage={10}\n          onQuizDone={(status) => setQuizStatus(getQuizIDFromURL(URL_NOUN_PARSING), status )}\n        />\n      ),\n    },\n    {\n      title: \"Conjunction\",\n      chapter: 4,\n      path: URL_CONJUNCTION,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={\"Conjunction\"}\n          subtitle={\"Match the conjunction with the word\"}\n          questionSet={shuffle(chapter_4_conjunction)}\n          maxPerPage={10}\n          onQuizDone={(status) => setQuizStatus(getQuizIDFromURL(URL_CONJUNCTION), status )}\n        />\n      ),\n    },\n    {\n      title: \"Chapter 5 Vocabulary (including this/that)\",\n      chapter: 5,\n      path: URL_VOCAB_5,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={vocabularyQuizTitle(5)}\n          questionSet={shuffle(chapter_5)}\n          onQuizDone={(status) => setQuizStatus(getQuizIDFromURL(URL_VOCAB_5), status )}\n        />\n      ),\n    },\n    {\n      title: \"Chapter 5 Translations (including this/that)\",\n      chapter: 5,\n      path: URL_TRANSLATIONS_5,\n      render: (\n        <SelectCorrectTranslationQuiz\n          inverted={inverted}\n          title={\"Translations for Chapter 5\"}\n          questionSet={shuffle(chapter_5_translations)}\n          onQuizDone={(status) => setQuizStatus(getQuizIDFromURL(URL_TRANSLATIONS_5), status )}\n        />\n      ),\n    },\n    {\n      title: \"Chapter 7 Vocabulary\",\n      chapter: 7,\n      path: URL_VOCAB_7,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={vocabularyQuizTitle(7)}\n          questionSet={shuffle(chapter_7)}\n          onQuizDone={(status) => setQuizStatus(getQuizIDFromURL(URL_VOCAB_7), status )}\n        />\n      ),\n    },\n    {\n      title: \"Chapter 8 Vocabulary\",\n      chapter: 8,\n      path: URL_VOCAB_8,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={vocabularyQuizTitle(8)}\n          questionSet={shuffle(chapter_8)}\n          onQuizDone={(status) => setQuizStatus(getQuizIDFromURL(URL_VOCAB_8), status )}\n        />\n      ),\n    },\n    {\n      title: \"Pronominal\",\n      chapter: 8,\n      path: URL_PRONOMINAL,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={\"Pronominal\"}\n          questionSet={shuffle(chapter_8_pronominal)}\n          onQuizDone={(status) => setQuizStatus(getQuizIDFromURL(URL_PRONOMINAL), status )}\n        />\n      ),\n    },\n    {\n      title: \"Chapter 9 Vocabulary\",\n      chapter: 9,\n      path: URL_VOCAB_9,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={vocabularyQuizTitle(9)}\n          questionSet={shuffle(chapter_9)}\n          onQuizDone={(status) => setQuizStatus(getQuizIDFromURL(URL_VOCAB_9), status )}\n        />\n      ),\n    },\n    {\n      title: \"Chapter 11 Vocabulary\",\n      chapter: 11,\n      path: URL_VOCAB_11,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={vocabularyQuizTitle(11)}\n          questionSet={shuffle(chapter_11)}\n          onQuizDone={(status) => setQuizStatus(getQuizIDFromURL(URL_VOCAB_11), status )}\n        />\n      ),\n    },\n    {\n      title: \"Qal Perfects (Qatal)\",\n      chapter: 12,\n      path: URL_QAL_PERFECT,\n      render: (\n        <ParsingQuiz\n          inverted={inverted}\n          questionSet={shuffle(qal_perfect_qatal)}\n          title={\"Qal Perfect (Qatal)\"}\n          onQuizDone={(status) => setQuizStatus(getQuizIDFromURL(URL_QAL_PERFECT), status )}\n        />\n      ),\n    },\n    {\n      title: \"Chapter 13 Vocabulary\",\n      chapter: 13,\n      path: URL_VOCAB_13,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={vocabularyQuizTitle(13)}\n          questionSet={shuffle(chapter_13)}\n          onQuizDone={(status) => setQuizStatus(getQuizIDFromURL(URL_VOCAB_13), status )}\n        />\n      ),\n    },\n    {\n      title: \"Qal Imperfects (Qatal)\",\n      chapter: 12,\n      path: URL_QAL_IMPERFECT,\n      render: (\n        <ParsingQuiz\n          inverted={inverted}\n          questionSet={shuffle(qal_imperfect_qatal)}\n          allowMultiplePerson={true}\n          title={\"Qal Imperfect (Qatal)\"}\n          onQuizDone={(status) => setQuizStatus(getQuizIDFromURL(URL_QAL_IMPERFECT), status )}\n        />\n      ),\n    },\n    {\n      title: \"Chapter 14 Vocabulary\",\n      chapter: 14,\n      path: URL_VOCAB_14,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={vocabularyQuizTitle(14)}\n          questionSet={shuffle(chapter_14)}\n          onQuizDone={(status) => setQuizStatus(getQuizIDFromURL(URL_VOCAB_14), status )}\n        />\n      ),\n    },\n    {\n      title: \"Chapter 15 Vocabulary\",\n      chapter: 15,\n      path: URL_VOCAB_15,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={vocabularyQuizTitle(15)}\n          questionSet={shuffle(chapter_15)}\n          onQuizDone={(status) => setQuizStatus(getQuizIDFromURL(URL_VOCAB_15), status )}\n        />\n      ),\n    },\n    {\n      title: \"Chapter 16 Vocabulary\",\n      chapter: 16,\n      path: URL_VOCAB_16,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={vocabularyQuizTitle(16)}\n          questionSet={shuffle(chapter_16)}\n          onQuizDone={(status) => setQuizStatus(getQuizIDFromURL(URL_VOCAB_16), status )}\n        />\n      ),\n    },\n    {\n      title: \"Chapter 17 Vocabulary\",\n      chapter: 17,\n      path: URL_VOCAB_17,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={vocabularyQuizTitle(17)}\n          questionSet={shuffle(chapter_17)}\n          onQuizDone={(status) => setQuizStatus(getQuizIDFromURL(URL_VOCAB_17), status )}\n        />\n      ),\n    },\n    {\n      title: \"Chapter 18 Vocabulary\",\n      chapter: 18,\n      path: URL_VOCAB_18,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={vocabularyQuizTitle(18)}\n          questionSet={shuffle(chapter_18)}\n          onQuizDone={(status) => setQuizStatus(getQuizIDFromURL(URL_VOCAB_18), status )}\n        />\n      ),\n    },\n    {\n      title: \"Chapter 19 Vocabulary\",\n      chapter: 19,\n      path: URL_VOCAB_19,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={vocabularyQuizTitle(19)}\n          questionSet={shuffle(chapter_19)}\n          onQuizDone={(status) => setQuizStatus(getQuizIDFromURL(URL_VOCAB_19), status )}\n        />\n      ),\n    },\n    {\n      title: \"Piel, Pual, and Hithpael\",\n      chapter: 19,\n      path: URL_FORMS_19,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={\"Piel, Pual, and Hithpael\"}\n          questionSet={chapter_19_forms}\n          maxPerPage={4}\n          onQuizDone={(status) => setQuizStatus(getQuizIDFromURL(URL_FORMS_19), status )}\n        />\n      ),\n    },\n    {\n      title: \"Chapter 20 Vocabulary\",\n      chapter: 20,\n      path: URL_VOCAB_20,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={vocabularyQuizTitle(20)}\n          questionSet={shuffle(chapter_20)}\n          onQuizDone={(status) => setQuizStatus(getQuizIDFromURL(URL_VOCAB_20), status )}\n        />\n      ),\n    },\n    {\n      title: \"Hiphil and Hophal\",\n      chapter: 20,\n      path: URL_FORMS_20,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={\"Hiphil and Hophal\"}\n          questionSet={chapter_20_forms}\n          maxPerPage={4}\n          onQuizDone={(status) => setQuizStatus(getQuizIDFromURL(URL_FORMS_20), status )}\n        />\n      ),\n    },\n    {\n      title: \"Chapter 22 Vocabulary\",\n      chapter: 22,\n      path: URL_VOCAB_22,\n      render: (\n        <MatchingQuiz\n          inverted={inverted}\n          title={vocabularyQuizTitle(22)}\n          questionSet={shuffle(chapter_22)}\n          onQuizDone={(status) => setQuizStatus(getQuizIDFromURL(URL_VOCAB_22), status )}\n        />\n      ),\n    },\n  ];\n\n  // Sort them by chapter\n  quizList.sort((first, second) => first.chapter - second.chapter);\n\n  return quizList;\n}\n","import React from \"react\";\nimport { getQuizStatus } from \"../Persistence/index\";\nimport PropTypes from \"prop-types\";\nimport { Icon } from \"semantic-ui-react\";\n\nfunction QuizStatus({ inverted, quizID }) {\n  const quizInfo = getQuizStatus(quizID);\n\n  if (quizInfo === null) {\n    return <Icon color=\"grey\" name=\"circle outline\" size=\"large\" />;\n  } else if (quizInfo !== null && quizInfo.status === true) {\n    return <Icon color=\"green\" name=\"check circle\" size=\"large\" />;\n  } else {\n    return <Icon color=\"yellow\" name=\"warning circle\" size=\"large\" />;\n  }\n}\n\nQuizStatus.propTypes = {\n  inverted: PropTypes.bool,\n  quizID: PropTypes.string,\n};\n\nQuizStatus.defaultProps = {\n  inverted: true,\n};\n\nexport default QuizStatus;\n","import React, { useState } from \"react\";\nimport { Table, Header } from \"semantic-ui-react\";\nimport {\n  Container,\n  Icon,\n  Button,\n  Input,\n  Message,\n  Dropdown,\n} from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport QuizRegistry from \"../QuizRegistry\";\nimport QuizStatus from \"./QuizStatus\";\nimport { getQuizStatus } from \"../Persistence/index\";\nimport { getQuizIDFromURL } from \"../Utils\";\nimport PropTypes from \"prop-types\";\n\nconst QUIZTYPE_ALL = null;\nconst QUIZTYPE_VOCAB = \"vocab\";\nconst QUIZTYPE_PARADIGM = \"paradigm\";\n\nconst QUIZCATEGORY_ALL = null;\nconst QUIZCATEGORY_NEXT = \"next\";\nconst QUIZCATEGORY_WRONG = \"wrong\";\nconst QUIZCATEGORY_RIGHT = \"right\";\nconst QUIZCATEGORY_NOT_DONE = \"not_done\";\n\n/**\n * Determine if the quiz is a vocabulary quiz.\n * @param {object} quiz\n * @returns\n */\nexport function isVocab(quiz) {\n  return quiz.title.includes(\"Vocabulary\");\n}\n\n/**\n * Filter the quizzes by type.\n *\n * @param {array} quizzes\n * @param {string} quizType\n * @returns\n */\nexport function filterQuizzesByType(quizzes, quizType) {\n  return quizzes.filter((quiz) => {\n    // Filter by type\n    if (!quizType) {\n      return true;\n    } else if (quizType === QUIZTYPE_VOCAB) {\n      return isVocab(quiz);\n    } else if (quizType === QUIZTYPE_PARADIGM) {\n      return !isVocab(quiz);\n    }\n\n    return true;\n  });\n}\n\n/**\n * Filter the quizzes by category.\n *\n * @param {array} quizzes\n * @param {string} quizCategory\n * @returns\n */\nexport function filterQuizzesByCategory(quizzes, quizCategory) {\n  return quizzes.filter((quiz) => {\n    // Filter by category\n    const quizInfo = getQuizStatus(getQuizIDFromURL(quiz.path));\n\n    if (quizCategory === QUIZCATEGORY_ALL) {\n      // Pass it through.\n      return true;\n    }\n\n    // Handle the case where we don't have quiz information\n    if (quizInfo === null) {\n      return quizCategory === QUIZCATEGORY_NOT_DONE;\n    } else {\n      if (quizCategory === QUIZCATEGORY_NOT_DONE) {\n        return quizInfo.status === null;\n      } else if (quizCategory === QUIZCATEGORY_WRONG) {\n        return quizInfo.status === false;\n      } else if (quizCategory === QUIZCATEGORY_RIGHT) {\n        return quizInfo.status === true;\n      }\n    }\n\n    // TODO add next up\n\n    return true;\n  });\n}\n\n/**\n * Search the quizzes by the search string.\n *\n * @param {array} quizzes\n * @param {string} search\n * @returns\n */\nexport function searchQuizzes(quizzes, search) {\n  return quizzes.filter((quiz) => {\n    if (!search) {\n      return true;\n    } else {\n      let match = false;\n      let searchLower = search.toLowerCase();\n\n      Object.entries(quiz).map(([, value]) => {\n        if (value.indexOf) {\n          match = match || value.toLowerCase().indexOf(searchLower) >= 0;\n        }\n      });\n      return match;\n    }\n  });\n}\n\n/**\n * Perform the various filters against all of the quizzes.\n *\n * @param {array} quizzes\n * @param {string} search\n * @param {string} quizType\n * @param {string} quizCategory\n * @returns\n */\nexport function filterQuizzes(quizzes, search, quizType, quizCategory) {\n  return searchQuizzes(\n    filterQuizzesByCategory(\n      filterQuizzesByType(quizzes, quizType),\n      quizCategory\n    ),\n    search\n  );\n}\n\n/**\n * Below are the options for the categories.\n */\nconst categoryOptions = [\n  {\n    key: QUIZCATEGORY_ALL,\n    text: \"All\",\n    value: QUIZCATEGORY_ALL,\n  },\n  {\n    key: QUIZCATEGORY_WRONG,\n    text: \"Wrong\",\n    value: QUIZCATEGORY_WRONG,\n  },\n  {\n    key: QUIZCATEGORY_NOT_DONE,\n    text: \"Unfinished\",\n    value: QUIZCATEGORY_NOT_DONE,\n  },\n  {\n    key: QUIZCATEGORY_RIGHT,\n    text: \"Done\",\n    value: QUIZCATEGORY_RIGHT,\n  },\n  /*\n  {\n    key: QUIZCATEGORY_NEXT,\n    text: 'Next up',\n    value: QUIZCATEGORY_NEXT,\n  },\n  */\n];\n\nfunction QuizList({ inverted }) {\n  const [search, setSearch] = useState(null);\n  const [quizType, setQuizType] = useState(QUIZTYPE_ALL);\n  const [quizCategory, setQuizCategory] = useState(QUIZCATEGORY_ALL);\n\n  // Filter the quizzes to the ones that we are searching for\n  const filteredQuizzes = QuizRegistry({ inverted })\n    ? filterQuizzes(QuizRegistry({ inverted }), search, quizType, quizCategory)\n    : null;\n\n  const quizRows = [];\n  for (const [index, value] of filteredQuizzes.entries()) {\n    quizRows.push(\n      <Table.Row key={index}>\n        <Table.Cell>\n          <QuizStatus quizID={getQuizIDFromURL(value.path)} /> {value.chapter}\n        </Table.Cell>\n        <Table.Cell>\n          <Link to={value.path}>{value.title}</Link>\n        </Table.Cell>\n      </Table.Row>\n    );\n  }\n\n  return (\n    <Container text>\n      <Header as=\"h1\" dividing>\n        Quizzes\n      </Header>\n\n      <Button.Group>\n        <Button\n          as={Link}\n          onClick={() => setQuizType(QUIZTYPE_ALL)}\n          active={quizType === QUIZTYPE_ALL}\n        >\n          All\n        </Button>\n        <Button\n          as={Link}\n          onClick={() => setQuizType(QUIZTYPE_VOCAB)}\n          active={quizType === QUIZTYPE_VOCAB}\n        >\n          Vocabulary\n        </Button>\n        <Button\n          as={Link}\n          onClick={() => setQuizType(QUIZTYPE_PARADIGM)}\n          active={quizType === QUIZTYPE_PARADIGM}\n        >\n          Other\n        </Button>\n      </Button.Group>\n\n      <Dropdown\n        options={categoryOptions}\n        onChange={(event, data) => setQuizCategory(data.value)}\n        defaultValue={quizCategory}\n        simple\n        item\n      ></Dropdown>\n\n      <Input\n        style={{ float: \"right\" }}\n        icon\n        placeholder=\"Search...\"\n        onChange={(e, d) => setSearch(d.value)}\n      >\n        <input />\n        <Icon name=\"search\" />\n      </Input>\n\n      {quizRows.length >= 0 && (\n        <Table basic=\"very\" celled collapsing>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell>Chapter</Table.HeaderCell>\n              <Table.HeaderCell>Title</Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <Table.Body>{quizRows}</Table.Body>\n        </Table>\n      )}\n      {quizRows.length === 0 && (\n        <Message\n          warning\n          header=\"No Matches\"\n          content=\"No quizzes match your search.\"\n        />\n      )}\n    </Container>\n  );\n}\n\nQuizList.propTypes = {\n  inverted: PropTypes.bool,\n};\n\nQuizList.defaultProps = {\n  inverted: true,\n};\n\nexport default QuizList;\n","import {\n  useRouteMatch,\n  Link,\n} from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport { Container, Menu } from \"semantic-ui-react\";\n\n/**\n * This class offers a menu entry for a tab that works with the React router to show the tab when clicked.\n */\nfunction TabMenuItem({ label, to, activeOnlyWhenExact }) {\n  let match = useRouteMatch({\n    path: to,\n    exact: activeOnlyWhenExact,\n  });\n\n  return (\n    <Menu.Item name={label} active={match !== null}>\n      <Link to={to}>{label}</Link>\n    </Menu.Item>\n  );\n}\n\nfunction NavContainer({ inverted, children }) {\n  return (\n      <>\n      <Container\n        fluid\n        style={{\n          padding: \"8px\",\n          marginBottom: 16,\n        }}\n      >\n        <Container text>\n          <Menu inverted={inverted}>\n            <TabMenuItem\n              to=\"/\"\n              label=\"Get the Book\"\n              activeOnlyWhenExact={true}\n            />\n            <TabMenuItem to=\"/quizzes\" label=\"Quizzes\" />\n            <TabMenuItem to=\"/about\" label=\"About\" />\n          </Menu>\n        </Container>\n      </Container>\n      {children}\n      </>\n  );\n}\n\nNavContainer.propTypes = {\n  inverted: PropTypes.bool,\n};\n\nNavContainer.defaultProps = {\n  inverted: true,\n};\n\nexport default NavContainer;\n","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();","import \"./App.css\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nimport {\n  HashRouter as Router,\n  Route,\n} from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport About from \"./components/About/index\";\nimport Home from \"./components/Home/index\";\nimport QuizList from \"./components/QuizList/index\";\nimport NavContainer from \"./components/NavContainer/index\";\nimport { URL_QUIZZES, URL_ABOUT, URL_HOME } from \"./components/URLs/index\";\nimport history from \"./history\";\nimport QuizRegistry from \"./components/QuizRegistry\";\n\nfunction App({ inverted }) {\n  return (\n    <Router history={history}>\n      <Route exact path={URL_QUIZZES}>\n        <NavContainer>\n          <QuizList inverted={inverted} />\n        </NavContainer>\n      </Route>\n      <Route exact path={URL_ABOUT}>\n        <NavContainer>\n          <About />\n        </NavContainer>\n      </Route>\n      <Route exact path={URL_HOME}>\n        <NavContainer>\n          <Home />\n        </NavContainer>\n      </Route>\n      {QuizRegistry({ inverted }).map((quiz, i) => (\n        <Route exact path={quiz.path}>\n          {quiz.render}\n        </Route>\n      ))}\n    </Router>\n  );\n}\n\nApp.propTypes = {\n  inverted: PropTypes.bool,\n};\n\nApp.defaultProps = {\n  inverted: true,\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { Header, Segment, Container } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { error: null, errorInfo: null };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    // Catch errors in any components below and re-render with error message\n    this.setState({\n      error,\n      errorInfo,\n    });\n  }\n\n  render() {\n    const { errorInfo, error } = this.state;\n    const { children, inverted } = this.props;\n\n    if (errorInfo) {\n      // Display the stack trace\n      return (\n        <Container style={{ marginTop: 32 }}>\n          <Segment inverted={inverted} color=\"red\">\n            <Header as=\"h1\">Something went wrong.</Header>\n            An error happened and the view could not be rendered.\n            <details style={{ whiteSpace: 'pre-wrap', marginTop: 24 }}>\n              {error && error.toString()}\n              <br />\n              {errorInfo.componentStack}\n            </details>\n          </Segment>\n        </Container>\n      );\n    }\n    // Normally, just render children\n    return children;\n  }\n}\n\nErrorBoundary.propTypes = {\n  children: PropTypes.element.isRequired,\n  inverted: PropTypes.bool,\n};\n\nErrorBoundary.defaultProps = {\n  inverted: false,\n};\n\nexport default ErrorBoundary;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport ErrorBoundary from './components/ErrorBoundary/index';\n\nReactDOM.render(\n  <ErrorBoundary>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </ErrorBoundary>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}